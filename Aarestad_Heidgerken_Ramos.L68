00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 11/28/2014 4:19:05 AM

00000000                             1  *-------------------------------------------------------------------------------
00000000                             2  * Title      : Dissassembler
00000000                             3  * Written by : Ryan Aarestad, David Heidgerken, Matthew Ramos
00000000                             4  * Date       : Thursday November 6, 2014
00000000                             5  * Description: Assembly language program that can read a string of binary and
00000000                             6  *              decode it into Assembly language instructions.  
00000000                             7  *-------------------------------------------------------------------------------
00000000                             8  
00000000                             9              OPT   CRE
00000000                            10  
00000000  =0000000D                 11  CR          EQU   $0D
00000000  =0000000A                 12  LF          EQU   $0A
00000000  =00001000                 13  START       EQU   $1000         * Progrfam starting address
00000000  =00002700                 14  EXIT        EQU   $2700         * Simulator stoping code
00000000  =00000002                 15  WORD        EQU   2             * Advance by a word
00000000                            16  
00000000                            17  
00000000                            18  *----------------------- Address Register / Data Register ----------------------
00000000                            19  * A0: Designated for Source Code
00000000                            20  * A1: Designated for Displaying text
00000000                            21  * A2: Designated for BITMASK list / TEMP POSITION
00000000                            22  * A3: Designated for Task Operation list
00000000                            23  * A4: 
00000000                            24  * A5: 
00000000                            25  * A6: 
00000000                            26  
00000000                            27  
00000000                            28  * D0: Designated for task code values while using TRAP #15
00000000                            29  * D1: Main 16-bits copy of the instructions (PRINTING PURPOSES)
00000000                            30  * D2: Task 11 only
00000000                            31  * D3: Temporary 16-bits for bitmask comparison
00000000                            32  * D4: 
00000000                            33  * D5: 
00000000                            34  * D6: 
00000000                            35  * D7: 
00000000                            36  *
00000000                            37  
00000000                            38  
00000000                            39  *------------------- Main Program / Initial Starting Point ---------------------
00000000                            40  
00001000                            41              ORG    START        * Program begins here
00001000                            42  
00001000  43F9 000011FC             43              LEA HEADER,A1       * Load Dissassembler header message into A1 
00001006  103C 000D                 44              MOVE.B #13,D0       * Move task 13 into Data Register 2
0000100A  4E4F                      45              TRAP #15            * Display the string at (A1) with CR, LF.
0000100C                            46  
0000100C                            47  
0000100C  41F9 000012C8             48              LEA SOURCE_C,A0     * Load the source code into address register 0
00001012                            49  
00001012                            50  RESET_MASK  * Resets the list of bitmasks & english to the begining
00001012                            51  
00001012  45F9 00001284             52              LEA BITMASK,A2      * Load the bitmask list into address register 2
00001018  47F9 00001240             53              LEA TASK_OP,A3      * Load the OP task list into address register 3
0000101E                            54  
0000101E                            55  
0000101E                            56  *--------------------- OP-CODE filter / Looping Algorithm ----------------------
0000101E                            57  * Comments here
0000101E                            58  *
0000101E                            59  
0000101E  3610                      60  LOOP        MOVE.W (A0),D3      * Move the current 16-bits into data register 3
00001020                            61  
00001020  C652                      62              AND.W (A2),D3       * AND the current bitmask with temp instruction
00001022                            63  
00001022  B652                      64              CMP.W (A2),D3       * Compares the current bitmask in (A2) with D3
00001024                            65  
00001024  6600 002C                 66              BNE NEXT_MASK       * No Match found branch to the NEXT_MASK
00001028                            67  
00001028                            68  
00001028  2208                      69              MOVE.L A0,D1        * Moving the current 16-bits address into data register 1
0000102A  103C 0003                 70              MOVE.B #3,D0        * Moving task 3 into Data Register 0 
0000102E  4E4F                      71              TRAP #15            * Display signed number in D1.L in decimal in smallest field. 
00001030                            72              
00001030                            73              ; LEA POSITION,A2       * Loading the OP print position into A2
00001030                            74              ; MOVE.B #11,D0         * Moving task 11 into Data Register 0
00001030                            75              ; MOVE.W (A2),D1
00001030                            76              ; ADDQ.W #1,(A2)
00001030                            77              ; TRAP #15
00001030                            78  
00001030  103C 000B                 79              MOVE.B #11,D0       * Moving task 11 into Data Register 0
00001034  3239 0000123C             80              MOVE.W POSITION,D1
0000103A  5279 0000123C             81              ADDQ.W #1,POSITION
00001040  4E4F                      82              TRAP #15
00001042                            83  
00001042  3653                      84              MOVEA.W (A3),A3     * Moves the task address into the same (An)
00001044  4E93                      85              JSR (A3)            * Jumps to the current task subroutine from A3
00001046                            86  
00001046  700E                      87              MOVE.L #14,D0       * Moving task 14 into Data Register 0
00001048  4E4F                      88              TRAP #15            * Display the string at (A1) without CR, LF
0000104A                            89  
0000104A                            90  
0000104A  6100 0024                 91              BSR DISPLAY         * Display the current 16-bits address
0000104E                            92  
0000104E  6000 000A                 93              BRA SHIFT           * Shifts to the next 16-bits of the source code
00001052                            94              
00001052                            95  
00001052                            96  *---------------------- Advancing Bitmask & OP Task list -----------------------
00001052                            97  * Comments here
00001052                            98  *
00001052                            99  
00001052  544A                     100  NEXT_MASK   ADDA.W #WORD,A2     * Shifts to the next bitmask
00001054  544B                     101              ADDA.W #WORD,A3     * Shifts to the next OP Name
00001056                           102  
00001056  4A53                     103              TST.W (A3)          * Did I reach the end of the English list?
00001058  66C4                     104              BNE LOOP            * Go back to LOOP and test the new bitmask
0000105A                           105  
0000105A  5448                     106  SHIFT       ADDA.W #WORD,A0     * Shifts to the next set of 16-bits instruction
0000105C                           107  
0000105C  4A50                     108              TST.W (A0)          * Checks to see if you reached the end of the instructions
0000105E  6700 0004                109              BEQ END             * (==) Branches to END stopping the program 
00001062  60AE                     110              BRA RESET_MASK      * Resets the bitmask & OP task lists
00001064                           111  
00001064                           112  END
00001064  33FC 0A01 0000123C       113              MOVE.W #$0A01,POSITION   *** TEST ***
0000106C                           114  *           POSITION    DC.W  $0A01,0
0000106C                           115  
0000106C  4E72 2700                116              STOP #EXIT          * Halt Simulator
00001070                           117  
00001070                           118  
00001070                           119  *----------------------------- Display Subroutine ------------------------------
00001070                           120  * Displays an output of a single 16-bit instruction 
00001070                           121  * Written by: Matthew Ramos
00001070                           122  *
00001070                           123  
00001070                           124  **** Beta Display Subroutine ***************************************************
00001070                           125  * <Address>  <OP><SIZE> <Dn/An>,<Dn/An>     <DATA_1><DATA_2>    <HEXADECIMAL>
00001070                           126  * xxxxxxxx   xxxx.x     xx,xx   $xxxxxxxx $xxxxxxxx             xxxx
00001070                           127  *xxxxxxxx   xxx 
00001070                           128  ********************************************************************************
00001070                           129  
00001070                           130  DISPLAY     
00001070                           131  
00001070  103C 000B                132              MOVE.B #11,D0       * Moving task 11 into Data Register 0
00001074  0641 2200                133              ADDI #$2200,D1
00001078  4E4F                     134              TRAP #15
0000107A                           135  
0000107A  2210                     136              MOVE.L (A0),D1      * Moves the current 16-bits into D1
0000107C  103C 0003                137              MOVE.B #3,D0        * Moving task 15 into Data Register 0 
00001080  4E4F                     138              TRAP #15            * Display an unsigned number in D1.L converted to number base 2 contained in D2.B
00001082                           139  
00001082  43F9 00001238            140              LEA NEWLINE,A1      * Creates a newline for the next instruction. Loading NEWLINE into (A1)
00001088  103C 000E                141              MOVE.B #14,D0       * Moving task 14 into Data Register 0
0000108C  4E4F                     142              TRAP #15            * Display the NULL terminated string at (A1) without CR, LF
0000108E  4E75                     143              RTS                 * Returns from subroutine
00001090                           144  
00001090                           145  
00001090                           146  *-------------------------------------------------------------------------------
00001090                           147  * SubRoutine for handling One Operand Effective addressing.
00001090                           148  * Written by: David Heidgerken
00001090                           149  * Description.  16 bit Instruction will be passed to subroutine via the stack
00001090                           150  * and will parse it to find which address mode and location is being used.
00001090                           151  *-------------------------------------------------------------------------------
00001090                           152  OneOpEA
00001090                           153  
00001090                           154  *-------------------------------------------------------------------------------
00001090                           155  * SubRoutine for handling One Operand Displacement.
00001090                           156  * Written by: David Heidgerken
00001090                           157  * Description.  16 bit Instruction will be passed to subroutine via the stack
00001090                           158  * and will parse the instruction to determine the offset being used.
00001090                           159  *-------------------------------------------------------------------------------
00001090                           160  OneOpDis
00001090                           161  
00001090                           162  *-------------------------------------------------------------------------------
00001090                           163  * SubRoutine for handling One Operand Effective addressing.
00001090                           164  * Written by: David Heidgerken
00001090                           165  * Description.  16 bit Instruction will be passed to subroutine via the stack
00001090                           166  * and will parse the last 12 bits to determine the addressing mode and 
00001090                           167  * locations of the data.
00001090                           168  *-------------------------------------------------------------------------------
00001090                           169  TwoOp
00001090                           170  
00001090                           171  
00001090                           172  
00001090                           173  *------------------- OP-CODE: Individual Task Subroutine Set -------------------
00001090                           174  * Comments here
00001090                           175  
00001090                           176  *-------------------------------------------------
00001090= 52 4F 4C 00              177  ROL_M       DC.B    'ROL',0     * Tested    0xE118
00001094  43F8 1090                178  ROL_T       LEA ROL_M,A1
00001098  4E75                     179              RTS
0000109A                           180  *-------------------------------------------------
0000109A= 4C 53 4C 00              181  LSL_M       DC.B    'LSL',0     * Tested    0xE108
0000109E  43F8 109A                182  LSL_T       LEA LSL_M,A1
000010A2  4E75                     183              RTS
000010A4                           184  *-------------------------------------------------
000010A4= 41 53 4C 00              185  ASL_M       DC.B    'ASL',0     * Tested    0xE100
000010A8  43F8 10A4                186  ASL_T       LEA ASL_M,A1
000010AC  4E75                     187              RTS
000010AE                           188  *-------------------------------------------------
000010AE= 52 4F 52 00              189  ROR_M       DC.B    'ROR',0     * Tested    0xE018
000010B2  43F8 10AE                190  ROR_T       LEA ROR_M,A1
000010B6  4E75                     191              RTS
000010B8                           192  *-------------------------------------------------
000010B8= 4C 53 52 00              193  LSR_M       DC.B    'LSR',0     * Tested    0xE008
000010BC  43F8 10B8                194  LSR_T       LEA LSR_M,A1
000010C0  4E75                     195              RTS
000010C2                           196  *-------------------------------------------------
000010C2= 41 53 52 00              197  ASR_M       DC.B    'ASR',0     * Tested    0xE000
000010C6  43F8 10C2                198  ASR_T       LEA ASR_M,A1
000010CA  4E75                     199              RTS
000010CC                           200  *-------------------------------------------------
000010CC= 41 44 44 41 00           201  ANDA_M      DC.B    'ADDA',0    * Tested    0xD0C0
000010D2  43F8 10CC                202  ANDA_T      LEA ANDA_M,A1
000010D6  4E75                     203              RTS
000010D8                           204  *-------------------------------------------------
000010D8= 41 44 44 00              205  ADD_M       DC.B    'ADD',0     * Tested    0xD000
000010DC  43F8 10D8                206  ADD_T       LEA ADD_M,A1
000010E0  4E75                     207              RTS
000010E2                           208  *-------------------------------------------------
000010E2= 4D 55 4C 53 00           209  MULS_M      DC.B    'MULS',0    * Issue     0xC1C0      Not sure if corrent bitmask
000010E8  43F8 10E2                210  MULS_T      LEA MULS_M,A1
000010EC  4E75                     211              RTS
000010EE                           212  *-------------------------------------------------
000010EE= 43 4D 50 00              213  CMP_M       DC.B    'CMP',0                 0xB000
000010F2  43F8 10EE                214  CMP_T       LEA CMP_M,A1
000010F6  4E75                     215              RTS
000010F8                           216  *-------------------------------------------------
000010F8= 53 55 42 00              217  SUB_M       DC.B    'SUB',0                 0x9000
000010FC  43F8 10F8                218  SUB_T       LEA SUB_M,A1
00001100  4E75                     219              RTS
00001102                           220  *-------------------------------------------------
00001102= 44 49 56 53 00           221  DIVS_M      DC.B    'DIVS',0    * Issue     0x81C0      Not sure if corrent bitmask
00001108  43F8 1102                222  DIVS_T      LEA DIVS_M,A1
0000110C  4E75                     223              RTS
0000110E                           224  *-------------------------------------------------
0000110E= 4F 52 00                 225  OR_M        DC.B    'OR',0                  0x8000
00001112  43F8 110E                226  OR_T        LEA OR_M,A1
00001116  4E75                     227              RTS
00001118                           228  *-------------------------------------------------
00001118= 42 4C 54 00              229  BLT_M       DC.B    'BLT',0                 0x6D00      May need to make branching
0000111C  43F8 1118                230  BLT_T       LEA BLT_M,A1
00001120  4E75                     231              RTS
00001122                           232  *-------------------------------------------------
00001122= 42 47 45 00              233  BGE_M       DC.B    'BGE',0                 0x6C00      its own subroutine loop
00001126  43F8 1122                234  BGE_T       LEA BGE_M,A1
0000112A  4E75                     235              RTS
0000112C                           236  *-------------------------------------------------
0000112C= 42 56 43 00              237  BVC_M       DC.B    'BVC',0                 0x6800
00001130  43F8 112C                238  BVC_T       LEA BVC_M,A1
00001134  4E75                     239              RTS
00001136                           240  *-------------------------------------------------
00001136= 42 43 53 00              241  BCS_M       DC.B    'BCS',0                 0x6500
0000113A  43F8 1136                242  BCS_T       LEA BCS_M,A1
0000113E  4E75                     243              RTS
00001140                           244  *-------------------------------------------------
00001140= 42 52 41 00              245  BRA_M       DC.B    'BRA',0                 0x6000
00001144  43F8 1140                246  BRA_T       LEA BRA_M,A1
00001148  4E75                     247              RTS
0000114A                           248  *-------------------------------------------------
0000114A= 53 55 42 51 00           249  SUBQ_M      DC.B    'SUBQ',0                0x5100
00001150  43F8 114A                250  SUBQ_T      LEA SUBQ_M,A1
00001154  4E75                     251              RTS
00001156                           252  *-------------------------------------------------
00001156= 4A 53 52 00              253  JSR_M       DC.B    'JSR',0     * Tested    0x4E80
0000115A  43F8 1156                254  JSR_T       LEA JSR_M,A1
0000115E  4E75                     255              RTS
00001160                           256  *-------------------------------------------------
00001160= 52 54 53 00              257  RTS_M       DC.B    'RTS',0     * Tested    0x4E75
00001164  43F8 1160                258  RTS_T       LEA RTS_M,A1
00001168  4E75                     259              RTS
0000116A                           260  *-------------------------------------------------
0000116A= 4E 4F 50 00              261  NOP_M       DC.B    'NOP',0     * Tested    0x4E71
0000116E  43F8 116A                262  NOP_T       LEA NOP_M,A1
00001172  4E75                     263              RTS
00001174                           264  *-------------------------------------------------
00001174= 4D 4F 56 45 4D 00        265  MOVEM_M     DC.B    'MOVEM',0               0x4880
0000117A  43F8 1174                266  MOVEM_T     LEA MOVEM_M,A1
0000117E  4E75                     267              RTS
00001180                           268  *-------------------------------------------------
00001180= 4E 45 47 00              269  NEG_M       DC.B    'NEG',0     * Tested    0x4400
00001184  43F8 1180                270  NEG_T       LEA NEG_M,A1
00001188  4E75                     271              RTS
0000118A                           272  *-------------------------------------------------
0000118A= 4C 45 41 00              273  LEA_M       DC.B    'LEA',0                 0x41C0
0000118E  43F8 118A                274  LEA_T       LEA LEA_M,A1
00001192  4E75                     275              RTS
00001194                           276  *-------------------------------------------------
00001194= 4D 4F 56 45 41 2E ...    277  MOAW_M      DC.B    'MOVEA.W',0             0x3040
0000119C  43F8 1194                278  MOAW_T      LEA MOAW_M,A1
000011A0  4E75                     279              RTS
000011A2                           280  *-------------------------------------------------
000011A2= 4D 4F 56 45 2E 57 00     281  MOW_M       DC.B    'MOVE.W',0              0x3000
000011AA  43F8 11A2                282  MOW_T       LEA MOW_M,A1
000011AE  4E75                     283              RTS
000011B0                           284  *-------------------------------------------------
000011B0= 4D 4F 56 45 41 2E ...    285  MOAL_M      DC.B    'MOVEA.L',0             0x2040
000011B8  43F8 11B0                286  MOAL_T      LEA MOAL_M,A1
000011BC  4E75                     287              RTS
000011BE                           288  *-------------------------------------------------
000011BE= 4D 4F 56 45 2E 4C 00     289  MOL_M       DC.B    'MOVE.L',0              0x2000
000011C6  43F8 11BE                290  MOL_T       LEA MOL_M,A1
000011CA  4E75                     291              RTS
000011CC                           292  *-------------------------------------------------
000011CC= 4D 4F 56 45 2E 42 00     293  MOB_M       DC.B    'MOVE.B',0              0x1000
000011D4  43F8 11CC                294  MOB_T       LEA MOB_M,A1
000011D8  4E75                     295              RTS
000011DA                           296  *-------------------------------------------------
000011DA= 43 4D 50 49 00           297  CMPI_M      DC.B    'CMPI',0                0x0C00
000011E0  43F8 11DA                298  CMPI_T      LEA CMPI_M,A1
000011E4  4E75                     299              RTS
000011E6                           300  *-------------------------------------------------
000011E6= 42 43 4C 52 00           301  BCLR_M      DC.B    'BCLR',0                0x01C0
000011EC  43F8 11E6                302  BCLR_T      LEA BCLR_M,A1
000011F0  4E75                     303              RTS
000011F2                           304  *-------------------------------------------------
000011F2= 4F 52 49 00              305  ORI_M       DC.B    'ORI',0                 0x0000
000011F6  43F8 11F2                306  ORI_T       LEA ORI_M,A1
000011FA  4E75                     307              RTS
000011FC                           308  
000011FC                           309  *-------------------------------- Data Section ---------------------------------
000011FC                           310  
000011FC= 41 44 44 52 45 53 ...    311  HEADER      DC.B 'ADDRESS   OP-CODE                           HEX INSTRUCTION', 0 
00001238= 0D 0A 00                 312  NEWLINE     DC.B  CR,LF,0
0000123C= 0A01 0000                313  POSITION    DC.W  $0A01,0
00001240                           314  
00001240                           315  ; Byte_M        DC.B  '.B ',0
00001240                           316  ; Word_M        DC.B  '.W ',0
00001240                           317  ; Long_M        DC.B  '.L ',0
00001240                           318  
00001240                           319  *---------------------------- Task Operation List ------------------------------
00001240                           320  * The values for this constant are set to move in parallel with those of
00001240                           321  * the constant BITMASK via steps at label NEXT_MASK.
00001240                           322  
00001240= 1094 109E 10A8 1...      323  TASK_OP     DC.W ROL_T,LSL_T,ASL_T,ROR_T,LSR_T,ASR_T,ANDA_T,ADD_T,MULS_T,CMP_T
00001254= 10FC 1108 1112 1...      324              DC.W SUB_T,DIVS_T,OR_T,BLT_T,BGE_T,BVC_T,BCS_T,BRA_T,SUBQ_T,JSR_T
00001268= 1164 116E 117A 1...      325              DC.W RTS_T,NOP_T,MOVEM_T,NEG_T,LEA_T,MOAW_T,MOW_T,MOAL_T,MOL_T,MOB_T
0000127C= 11E0 11EC 11F6 0000      326              DC.W CMPI_T,BCLR_T,ORI_T,0
00001284                           327  
00001284                           328  *--------------------------- Bitmask Translation List --------------------------
00001284= E118 E108 E100 E...      329  BITMASK     DC.W $E118,$E108,$E100,$E018,$E008,$E000,$D0C0,$D000,$C1C0,$B000
00001298= 9000 81C0 8000 6...      330              DC.W $9000,$81C0,$8000,$6D00,$6C00,$6800,$6500,$6000,$5100,$4E80
000012AC= 4E75 4E71 4880 4...      331              DC.W $4E75,$4E71,$4880,$4400,$41C0,$3040,$3000,$2040,$2000,$1000
000012C0= 0C00 01C0 0000 0000      332              DC.W $0C00,$01C0,$0000,0
000012C8                           333  
000012C8                           334  
000012C8                           335  *--------------------------------- Source Code ---------------------------------
000012C8= 4E75 D6C7 4EB8 4...      336  SOURCE_C    DC.W  $4E75,$D6C7,$4EB8,$4487,$D5C2,$4E71,$4EB9,$D280,$4E71,$4E75
000012DC                           337  ;                  RTS   ADDA  JSR   NEG   ADDA  NOP   JSR   ADD   NOP   RTS
000012DC= AAAA EE45 E6AA E...      338              DC.W  $AAAA,$EE45,$E6AA,$E439,$EF45,$E7AA,$E539,$303C
000012EC                           339  ;                  ERROR ASR   LSR   ROR   ASL   LSL   ROL   MOVE.W
000012EC= E539 E7AA EF45 E...      340              DC.W  $E539,$E7AA,$EF45,$E439,$BBBB,$E6AA,$EE45,$85C3,0
000012FE                           341  ;                  ROL   LSL   ASL   ROR   ERROR LSR   ASR   DIVS
000012FE                           342  
000012FE                           343  
000012FE                           344      END     START               * last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD_M               10D8
ADD_T               10DC
ANDA_M              10CC
ANDA_T              10D2
ASL_M               10A4
ASL_T               10A8
ASR_M               10C2
ASR_T               10C6
BCLR_M              11E6
BCLR_T              11EC
BCS_M               1136
BCS_T               113A
BGE_M               1122
BGE_T               1126
BITMASK             1284
BLT_M               1118
BLT_T               111C
BRA_M               1140
BRA_T               1144
BVC_M               112C
BVC_T               1130
CMPI_M              11DA
CMPI_T              11E0
CMP_M               10EE
CMP_T               10F2
CR                  D
DISPLAY             1070
DIVS_M              1102
DIVS_T              1108
END                 1064
EXIT                2700
HEADER              11FC
JSR_M               1156
JSR_T               115A
LEA_M               118A
LEA_T               118E
LF                  A
LOOP                101E
LSL_M               109A
LSL_T               109E
LSR_M               10B8
LSR_T               10BC
MOAL_M              11B0
MOAL_T              11B8
MOAW_M              1194
MOAW_T              119C
MOB_M               11CC
MOB_T               11D4
MOL_M               11BE
MOL_T               11C6
MOVEM_M             1174
MOVEM_T             117A
MOW_M               11A2
MOW_T               11AA
MULS_M              10E2
MULS_T              10E8
NEG_M               1180
NEG_T               1184
NEWLINE             1238
NEXT_MASK           1052
NOP_M               116A
NOP_T               116E
ONEOPDIS            1090
ONEOPEA             1090
ORI_M               11F2
ORI_T               11F6
OR_M                110E
OR_T                1112
POSITION            123C
RESET_MASK          1012
ROL_M               1090
ROL_T               1094
ROR_M               10AE
ROR_T               10B2
RTS_M               1160
RTS_T               1164
SHIFT               105A
SOURCE_C            12C8
START               1000
SUBQ_M              114A
SUBQ_T              1150
SUB_M               10F8
SUB_T               10FC
TASK_OP             1240
TWOOP               1090
WORD                2
