00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 11/23/2014 11:14:45 PM

00000000                             1  *-------------------------------------------------------------------------------
00000000                             2  * Title      : Dissassembler
00000000                             3  * Written by : Ryan Aarestad, David Heidgerken, Matthew Ramos
00000000                             4  * Date       : Thursday November 6, 2014
00000000                             5  * Description: Assembly language program that can read a string of binary and
00000000                             6  *              decode it into Assembly language instructions.  
00000000                             7  *-------------------------------------------------------------------------------
00000000                             8  
00000000                             9              OPT   CRE
00000000                            10  
00000000  =0000000D                 11  CR          EQU   $0D
00000000  =0000000A                 12  LF          EQU   $0A
00000000  =00001000                 13  START       EQU   $1000         * Program starting address
00000000  =00002700                 14  EXIT        EQU   $2700         * Simulator stoping code
00000000  =00000002                 15  WORD        EQU   2             * Advance by a word
00000000                            16  
00000000                            17  *----------------------- Address Register / Data Register ----------------------
00000000                            18  * A0: Designated for Source Code
00000000                            19  * A1: Designated for Displaying text
00000000                            20  * A2: Designated for BITMASK list
00000000                            21  * A3: Designated for English Translation list
00000000                            22  * A4: 
00000000                            23  * A5: 
00000000                            24  * A6: 
00000000                            25  *
00000000                            26  * D0: Designated for task code values
00000000                            27  * D1: Main 16bits copy of the instructions (PRINT)
00000000                            28  * D2: Designated for n Base (while using task 15)
00000000                            29  * D3: Temporary 16-bits for bitmask comparison
00000000                            30  * D4: 
00000000                            31  * D5: 
00000000                            32  * D6: 
00000000                            33  * D7: 
00000000                            34  *
00000000                            35  
00000000                            36  *------------------------ Main Program / Starting Point ------------------------
00000000                            37  
00001000                            38              ORG    START        * Program begins here
00001000                            39  
00001000  41F9 00001152             40              LEA SOURCE_C,A0     * Load the source code into address register 0
00001006                            41  
00001006                            42  RESET_MASK  * Resets the list of bitmasks & english to the begining
00001006                            43  
00001006  45F9 00001124             44              LEA BITMASK,A2      * Load the bitmask list into address register 2
0000100C  47F9 000010F6             45              LEA ENGLISH,A3      * Load the english list into address register 3
00001012                            46  
00001012                            47  *-------------------------------------------------------------------------------
00001012                            48  * Comments here
00001012                            49  
00001012  3610                      50  LOOP        MOVE.W (A0),D3      * Move the current 16-bits into data register 3
00001014                            51  
00001014  C652                      52              AND.W (A2),D3       * AND the current bitmask with temp instruction
00001016                            53  
00001016  B652                      54              CMP.W (A2),D3       * Compares the current bitmask in (A2) with D3
00001018                            55  
00001018  6600 0012                 56              BNE NEXT_MASK       * No Match found branch to the NEXT_MASK
0000101C                            57  
0000101C                            58              *************************************
0000101C                            59              * Pass the remaining code/part to EA
0000101C                            60              *************************************
0000101C                            61  
0000101C  3253                      62              MOVEA.W (A3),A1     * Loading current address from ENGLISH into (A1)
0000101E  700E                      63              MOVE.L #14,D0       * Moving task 14 into Data Register 0
00001020  4E4F                      64              TRAP #15            * Display the string at (A1) without CR, LF
00001022                            65  
00001022                            66  
00001022  3210                      67              MOVE.W (A0),D1      * Moves the current 16-bits into D1
00001024                            68  
00001024  6100 0020                 69              BSR DISPLAY_BINARY_HEXADECIMAL  * Display the 16-bits in base 2 & 16
00001028                            70  
00001028  6000 000A                 71              BRA SHIFT           * Shifts to the next 16-bits of the source code
0000102C                            72  
0000102C                            73  *---------------------- Advancing Bitmask & English list -----------------------
0000102C                            74  * Comments here
0000102C                            75  
0000102C  544A                      76  NEXT_MASK   ADDA.W #WORD,A2     * Shifts to the next bitmask
0000102E  544B                      77              ADDA.W #WORD,A3     * Shifts to the next OP Name
00001030                            78  
00001030  4A53                      79              TST.W (A3)          * Did I reach the end of the English list?
00001032  66DE                      80              BNE LOOP            * Go back to LOOP and test the new bitmask
00001034                            81  
00001034  5448                      82  SHIFT       ADDA.W #WORD,A0     * Shifts to the next set of 16-bits instruction
00001036                            83  
00001036  4A50                      84              TST.W (A0)          * Checks to see if you reached the end of instructions
00001038  6700 0004                 85              BEQ END             * Branches to end the program 
0000103C  60C8                      86              BRA RESET_MASK      * Resets the bitmask & english lists
0000103E                            87  
0000103E  4E72 2700                 88  END         STOP #EXIT
00001042                            89  
00001042  FFFF FFFF                 90              SIMHALT             * halt simulator
00001046                            91  
00001046                            92  *----------------------------- Display Subroutine ------------------------------
00001046                            93  * Displays an output of a single 16-bit instruction 
00001046                            94  * Written by: Matthew Ramos
00001046                            95  * Example output:   '<OPERATION>  :  <BINARY>  :  <HEXADECIMAL>'
00001046                            96  *
00001046                            97  
00001046                            98  DISPLAY_BINARY_HEXADECIMAL:
00001046                            99  
00001046                           100  ;           BSR Tab             * Displays a space between the OP & BINARY
00001046                           101  
00001046                           102  ; BINARY        MOVE.B #15,D0       * Moving task 15 into Data Register 0
00001046                           103  ;           MOVE.B #2,D2        * Moving value 2 into Data Register 2 [base 2]
00001046                           104  ;           TRAP #15            * Display an unsigned number in D1.L converted to number base 2 contained in D2.B
00001046                           105  
00001046  6100 001A                106              BSR Tab             * Displays a space between the BINARY & HEXADECIMAL
0000104A                           107  
0000104A  103C 000F                108  HEXADECIMAL MOVE.B #15,D0       * Moving task 15 into Data Register 0 
0000104E  143C 0010                109              MOVE.B #16,D2       * Moving value 16 into Data Register 2 [base 16]
00001052  4E4F                     110              TRAP #15            * Display an unsigned number in D1.L converted to number base 2 contained in D2.B
00001054                           111  
00001054                           112  
00001054  43F9 00001076            113              LEA NEWLINE,A1      * Creates a newline for the next instruction. Loading NEWLINE into (A1)
0000105A  103C 000E                114              MOVE.B #14,D0       * Moving task 14 into Data Register 0
0000105E  4E4F                     115              TRAP #15            * Display the NULL terminated string at (A1) without CR, LF
00001060  4E75                     116              RTS                 * Returns from subroutine
00001062                           117  
00001062  43F9 00001070            118  TAB         LEA SPACE,A1        * Loading address from SPACE message into (A1)
00001068  103C 000E                119              MOVE.B #14,D0       * Moving task 14 into Data Register 0 
0000106C  4E4F                     120              TRAP #15            * Display string at (A1) without CR, LF.
0000106E  4E75                     121              RTS                 * Returns from subroutine
00001070                           122  
00001070                           123  
00001070                           124  *-------------------------------------------------------------------------------
00001070                           125  * SubRoutine for handling One Operand Effective addressing.
00001070                           126  * Written by: David Heidgerken
00001070                           127  * Description.  16 bit Instruction will be passed to subroutine via the stack
00001070                           128  * and will parse it to find which address mode and location is being used.
00001070                           129  *-------------------------------------------------------------------------------
00001070                           130  OneOpEA
00001070                           131  
00001070                           132  *-------------------------------------------------------------------------------
00001070                           133  * SubRoutine for handling One Operand Displacement.
00001070                           134  * Written by: David Heidgerken
00001070                           135  * Description.  16 bit Instruction will be passed to subroutine via the stack
00001070                           136  * and will parse the instruciton to determine the offset being used.
00001070                           137  *-------------------------------------------------------------------------------
00001070                           138  OneOpDis
00001070                           139  
00001070                           140  *-------------------------------------------------------------------------------
00001070                           141  * SubRoutine for handling One Operand Effective addressing.
00001070                           142  * Written by: David Heidgerken
00001070                           143  * Description.  16 bit Instruction will be passed to subroutine via the stack
00001070                           144  * and will parse the last 12 bits to determine the addressing mode and 
00001070                           145  * locations of the data.
00001070                           146  *-------------------------------------------------------------------------------
00001070                           147  TwoOp
00001070                           148  
00001070                           149  
00001070                           150  
00001070                           151  *-------------------------------- Data Section ---------------------------------
00001070                           152  
00001070= 20 20 3A 20 20 00        153  SPACE       DC.B  '  :  ',0
00001076= 0D 0A 00                 154  NEWLINE     DC.B  CR,LF,0
00001079                           155  
00001079= 2E 42 20 00              156  Byte_M      DC.B  '.B ',0
0000107D= 2E 57 20 00              157  Word_M      DC.B  '.W ',0
00001081= 2E 4C 20 00              158  Long_M      DC.B  '.L ',0
00001085                           159  
00001085                           160  *----------------------------- English Translation -----------------------------
00001085                           161  
00001085= 52 4F 4C 00              162  ROL_M       DC.B    'ROL',0     * Tested    0xE118
00001089= 4C 53 4C 00              163  LSL_M       DC.B    'LSL',0     * Tested    0xE108
0000108D= 41 53 4C 00              164  ASL_M       DC.B    'ASL',0     * Tested    0xE100
00001091= 52 4F 52 00              165  ROR_M       DC.B    'ROR',0     * Tested    0xE018
00001095= 4C 53 52 00              166  LSR_M       DC.B    'LSR',0     * Tested    0xE008
00001099= 41 53 52 00              167  ASR_M       DC.B    'ASR',0     * Tested    0xE000
0000109D= 41 44 44 41 00           168  ANDA_M      DC.B    'ADDA',0    * Tested    0xD0C0
000010A2= 41 44 44 00              169  ADD_M       DC.B    'ADD',0     * Tested    0xD000
000010A6= 4D 55 4C 53 00           170  MULS_M      DC.B    'MULS',0    * Issue     0xC1C0      Not sure if corrent bitmask
000010AB= 43 4D 50 00              171  CMP_M       DC.B    'CMP',0                 0xB000
000010AF= 53 55 42 00              172  SUB_M       DC.B    'SUB',0                 0x9000
000010B3= 44 49 56 53 00           173  DIVS_M      DC.B    'DIVS',0    * Issue     0x81C0      Not sure if corrent bitmask
000010B8= 4F 52 00                 174  OR_M        DC.B    'OR',0                  0x8000
000010BB                           175  
000010BB= 42 4C 54 00              176  BLT_M       DC.B    'BLT',0                 0x6D00      May need to make branching
000010BF= 42 47 45 00              177  BGE_M       DC.B    'BGE',0                 0x6C00      its own subroutine loop
000010C3= 42 56 43 00              178  BVC_M       DC.B    'BVC',0                 0x6800
000010C7= 42 43 53 00              179  BCS_M       DC.B    'BCS',0                 0x6500
000010CB= 42 52 41 00              180  BRA_M       DC.B    'BRA',0                 0x6000
000010CF                           181  
000010CF= 53 55 42 51 00           182  SUBQ_M      DC.B    'SUBQ',0                0x5100
000010D4= 4A 53 52 00              183  JSR_M       DC.B    'JSR',0     * Tested    0x4E80
000010D8= 52 54 53 00              184  RTS_M       DC.B    'RTS',0     * Tested    0x4E75
000010DC= 4E 4F 50 00              185  NOP_M       DC.B    'NOP',0     * Tested    0x4E71
000010E0                           186  ; MOVEM_M       DC.B    'MOVEM',0
000010E0= 4E 45 47 00              187  NEG_M       DC.B    'NEG',0     * Tested    0x4400
000010E4= 4C 45 41 00              188  LEA_M       DC.B    'LEA',0                 0x41C0
000010E8                           189  ; MOVEA.L_M DC.B    'MOVEA.L',0
000010E8                           190  ; MOVE.W_M  DC.B    'MOVE.W',0
000010E8                           191  ; MOVEA.L_M DC.B    'MOVEA.L',0
000010E8                           192  ; MOVE.L_M  DC.B    'MOVE.L',0
000010E8                           193  ; MOVE.B_M  DC.B    'MOVE.B',0
000010E8= 43 4D 50 49 00           194  CMPI_M      DC.B    'CMPI',0                0x0C00
000010ED= 42 43 4C 52 00           195  BCLR_M      DC.B    'BCLR',0                0x01C0
000010F2= 4F 52 49 00              196  ORI_M       DC.B    'ORI',0                 0x0000
000010F6                           197  
000010F6                           198  *-------------------------- English Translation List ---------------------------
000010F6                           199  * The values for this constant are set to move in parallel with those of
000010F6                           200  * the constant BITMASK via steps at label NEXT_MASK.
000010F6                           201  
000010F6= 1085 1089 108D 1...      202  ENGLISH     DC.W ROL_M,LSL_M,ASL_M,ROR_M,LSR_M,ASR_M,ANDA_M,ADD_M,MULS_M,CMP_M
0000110A= 10AF 10B3 10B8           203              DC.W SUB_M,DIVS_M,OR_M *,BLT_M,BGE_M,BVC_M,BCS_M,BRA_M,
00001110= 10CF 10D4                204              DC.W SUBQ_M,JSR_M
00001114= 10D8 10DC 10E0 1...      205              DC.W RTS_M,NOP_M,NEG_M,LEA_M,CMPI_M,BCLR_M,ORI_M,0
00001124                           206  
00001124                           207  
00001124                           208  *--------------------------- Bitmask Translation List --------------------------
00001124= E118 E108 E100 E...      209  BITMASK     DC.W $E118,$E108,$E100,$E018,$E008,$E000,$D0C0,$D000,$C1C0,$B000
00001138= 9000 81C0 8000           210              DC.W $9000,$81C0,$8000 *,$6D00,$6C00,$6800,$6500,$6000,
0000113E= 5100 4E80                211              DC.W $5100,$4E80
00001142= 4E75 4E71 4400 4...      212              DC.W $4E75,$4E71,$4400,$41C0,$0C00,$01C0,$0000,0
00001152                           213  
00001152                           214  
00001152                           215  *--------------------------------- Source Code ---------------------------------
00001152= 4E75 D6C7 4EB8 4...      216  SOURCE_C    DC.W  $4E75,$D6C7,$4EB8,$4487,$D5C2,$4E71,$4EB9,$D280,$4E71,$4E75
00001166                           217  ;                  RTS   ADDA  JSR   NEG   ADDA  NOP   JSR   ADD   NOP   RTS
00001166= EE45 E6AA AAAA E...      218              DC.W  $EE45,$E6AA,$AAAA,$E439,$EF45,$E7AA,$E539
00001174                           219  ;                  ASR   LSR   ERROR ROR   ASL   LSL   ROL
00001174= E539 E7AA EF45 E...      220              DC.W  $E539,$E7AA,$EF45,$E439,$BBBB,$E6AA,$EE45,$85C3,0
00001186                           221  ;                  ROL   LSL   ASL   ROR   ERROR LSR   ASR   DIVS
00001186                           222  
00001186                           223      END     START               * last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD_M               10A2
ANDA_M              109D
ASL_M               108D
ASR_M               1099
BCLR_M              10ED
BCS_M               10C7
BGE_M               10BF
BITMASK             1124
BLT_M               10BB
BRA_M               10CB
BVC_M               10C3
BYTE_M              1079
CMPI_M              10E8
CMP_M               10AB
CR                  D
DISPLAY_BINARY_HEXADECIMAL  1046
DIVS_M              10B3
END                 103E
ENGLISH             10F6
EXIT                2700
HEXADECIMAL         104A
JSR_M               10D4
LEA_M               10E4
LF                  A
LONG_M              1081
LOOP                1012
LSL_M               1089
LSR_M               1095
MULS_M              10A6
NEG_M               10E0
NEWLINE             1076
NEXT_MASK           102C
NOP_M               10DC
ONEOPDIS            1070
ONEOPEA             1070
ORI_M               10F2
OR_M                10B8
RESET_MASK          1006
ROL_M               1085
ROR_M               1091
RTS_M               10D8
SHIFT               1034
SOURCE_C            1152
SPACE               1070
START               1000
SUBQ_M              10CF
SUB_M               10AF
TAB                 1062
TWOOP               1070
WORD                2
WORD_M              107D
