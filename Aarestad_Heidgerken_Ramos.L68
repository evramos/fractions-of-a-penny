00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 11/30/2014 11:58:17 PM

00000000                             1  *-------------------------------------------------------------------------------
00000000                             2  * Title      : Dissassembler
00000000                             3  * Written by : Ryan Aarestad, David Heidgerken, Matthew Ramos
00000000                             4  * Date       : Thursday November 6, 2014
00000000                             5  * Description: Assembly language program that can read a string of binary and
00000000                             6  *              decode it into Assembly language instructions.  
00000000                             7  *-------------------------------------------------------------------------------
00000000                             8  
00000000                             9              OPT   CRE
00000000                            10  
00000000  =0000000D                 11  CR          EQU   $000D
00000000  =0000000A                 12  LF          EQU   $000A
00000000  =00001000                 13  START       EQU   $1000         * Program starting address
00000000  =00002700                 14  EXIT        EQU   $2700         * Simulator stoping code
00000000  =00000002                 15  WORD        EQU   $0002         * Advance address by a word
00000000                            16  
00000000  =000000FF                 17  BITMASK8    EQU   $00FF
00000000  =0000000F                 18  BITMASK4    EQU   $000F
00000000  =00000007                 19  BITMASK3    EQU   $0007
00000000                            20  
00000000                            21  *----------------------- Address Register / Data Register ----------------------
00000000                            22  * A0: Designated for Source Code
00000000                            23  * A1: Designated for Displaying string to the output
00000000                            24  * A2: Designated for OP Bitmask list / Hexadecimal Bitmask list
00000000                            25  * A3: Designated for Task Operation list / Hexadecimal value list
00000000                            26  * A4: 
00000000                            27  * A5: 
00000000                            28  * A6: 
00000000                            29  
00000000                            30  
00000000                            31  * D0: Designated for task code values while using TRAP #15
00000000                            32  * D1: Main 16-bits copy of the instructions (PRINTING PURPOSES) / Task 11
00000000                            33  * D2: Hexadecimal Temp convert
00000000                            34  * D3: Temporary 16-bits for bitmask comparison
00000000                            35  * D4: 
00000000                            36  * D5: 
00000000                            37  * D6: 
00000000                            38  * D7: 
00000000                            39  
00000000                            40  *------------------- Main Program / Initial Starting Point ---------------------
00000000                            41  
00001000                            42              ORG    START        * Program begins here
00001000                            43  
00001000  43F9 00001462             44              LEA HEADER,A1       * Load Dissassembler header message into A1 
00001006  103C 000D                 45              MOVE.B #13,D0       * Move task 13 into Data Register 0
0000100A  4E4F                      46              TRAP #15            * Display the string at (A1) with CR, LF.
0000100C                            47  
0000100C  41F9 00001526             48              LEA SOURCE_C,A0     * Load the source code into address register 0
00001012                            49  
00001012  6100 000E                 50              BSR INIT_OP         * Hunts down each Operation code like a mad man
00001016                            51  
00001016  33FC 0001 0000149C        52              MOVE.W #$0001,POSITION  *** TEST - RESET POSITION ***
0000101E                            53  
0000101E  4E72 2700                 54              STOP #EXIT          * Halt Simulator
00001022                            55  
00001022                            56  
00001022                            57  ********************* OP-CODE Looping Algorithm Subroutine *********************
00001022                            58  
00001022                            59  INIT_OP     * Resets the list of bitmasks & english to the begining
00001022                            60  
00001022                            61  
00001022                            62  *--- Displaying the current address as a hexadecimal value ---*
00001022  3408                      63              MOVE.W A0,D2        * Moving the current 16-bits address into D2
00001024  6100 0094                 64              BSR DISPLAY_HEX 
00001028                            65  
00001028                            66  
00001028  45F9 000014E2             67              LEA BITMASK,A2      * Load the bitmask list into address register 2
0000102E  47F9 0000149E             68              LEA TASK_OP,A3      * Load the OP task list into address register 3
00001034                            69  
00001034                            70  
00001034  3610                      71  LOOP_OP     MOVE.W (A0),D3      * Move the current 16-bits into data register 3
00001036  C652                      72              AND.W (A2),D3       * AND the current bitmask with temp instruction
00001038  B652                      73              CMP.W (A2),D3       * Compares the current bitmask in (A2) with D3
0000103A  6600 004C                 74              BNE NEXT_MASK       * No Match found branch to the NEXT_MASK
0000103E                            75              
0000103E                            76  
0000103E                            77  *--- Moving the cursor to the desired location ---*
0000103E  103C 000B                 78              MOVE.B #11,D0       * Moving task 11 into Data Register 0
00001042  3239 0000149C             79              MOVE.W POSITION,D1  * Setting up the desired row position
00001048  0641 0A00                 80              ADDI.W #$0A00,D1    * Setting up the desired column position
0000104C  4E4F                      81              TRAP #15            * Position the cursor at [0Axx] x - any number
0000104E                            82  
0000104E                            83              ; MOVE.W (A0),D7        ******  TESTING 1  ******
0000104E  3848                      84              MOVEA.W A0,A4           ******  TESTING 2  ******
00001050                            85  
00001050                            86  *--- Retrieve matched task then execute by jumping to subroutine  ---*
00001050  3653                      87              MOVEA.W (A3),A3     * Moves the task address into the same (An)
00001052  4E93                      88              JSR (A3)            * Jumps to the current task subroutine from A3
00001054                            89  
00001054                            90  
00001054                            91  *--- Displaying the current instruction as a hexadecimal value ---*
00001054                            92              ; MOVE.W (A0),D2        * Reloads the orignal 16-bits as a temp again
00001054                            93              ; MOVE.W D7,D2      * Reloads the orignal 16-bits as a temp again
00001054                            94  
00001054  341C                      95              MOVE.W (A4)+,D2     * Reloads the orignal 16-bits as a temp again
00001056  6100 0046                 96              BSR DISPLAY_INT     * Display the current 16-bits in Hexadecimal
0000105A                            97      
0000105A  B450                      98              CMP.W (A0),D2           ******  TESTING 2  ******
0000105C  6600 0012                 99              BNE HELP_HEX
00001060                           100  
00001060  43F9 00001499            101  NW_A        LEA NEWLINE,A1      * Loading NEWLINE into (A1) for next instruction
00001066  103C 000E                102              MOVE.B #14,D0       * Moving task 14 into Data Register 0
0000106A  4E4F                     103              TRAP #15            * Display the string at (A1) without CR, LF
0000106C                           104  
0000106C  6000 0022                105              BRA SHIFT_OP            * Shifts to the next 16-bits of the source code
00001070                           106  
00001070                           107  
00001070  103C 000B                108  HELP_HEX    MOVE.B #11,D0       * Moving task 11 into Data Register 0
00001074  3239 0000149C            109              MOVE.W POSITION,D1  * Setting up the desired row position
0000107A  0641 3300                110              ADDI #$3300,D1      * Setting up the desired column position
0000107E  4E4F                     111              TRAP #15            * Position the cursor at [2Cxx] x - any number
00001080  341C                     112              MOVE.W (A4)+,D2
00001082  6100 0036                113              BSR DISPLAY_HEX
00001086                           114  
00001086  60D8                     115              BRA NW_A
00001088                           116  
00001088                           117  *---------------------- Advancing Bitmask & OP Task list -----------------------
00001088                           118  
00001088  544A                     119  NEXT_MASK   ADDA.W #WORD,A2     * Shifts to the next bitmask
0000108A  544B                     120              ADDA.W #WORD,A3     * Shifts to the next OP Name
0000108C                           121  
0000108C  4A53                     122              TST.W (A3)          * Did I reach the end of the English list?
0000108E  66A4                     123              BNE LOOP_OP         * Go back to LOOP_OP and test the new bitmask
00001090                           124  
00001090  5448                     125  SHIFT_OP    ADDA.W #WORD,A0     * Shifts to the next set of 16-bits instruction
00001092                           126  
00001092  5279 0000149C            127              ADDQ.W #1,POSITION  *** IMPORTANT: Shifts the row position by 1 ***
00001098                           128  
00001098  4A50                     129              TST.W (A0)          * See if you reached the end of the instructions
0000109A  6686                     130              BNE INIT_OP         * (!=) Resets the bitmask & OP task lists
0000109C  4E75                     131              RTS                 * Returns from subroutine
0000109E                           132  
0000109E                           133  
0000109E                           134  ************************ Display Hexadecimal Subroutine ************************
0000109E                           135  * Displays an output of a single 16-bit instruction as a hexadecimal value
0000109E                           136  * Take that prof. Nash (mostly Kim), I didn't want to use task #15 anyway
0000109E                           137  
0000109E                           138  *** IMPORTANT *** Load the value that you wish to display in hexadecimal in D2
0000109E                           139      
0000109E                           140  DISPLAY_INT:
0000109E                           141  *--- Moving the cursor to the desired location ---*
0000109E  103C 000B                142              MOVE.B #11,D0       * Moving task 11 into Data Register 0
000010A2  3239 0000149C            143              MOVE.W POSITION,D1  * Setting up the desired row position
000010A8  0641 2C00                144              ADDI #$2C00,D1      * Setting up the desired column position
000010AC  4E4F                     145              TRAP #15            * Position the cursor at [2Cxx] x - any number
000010AE                           146  
000010AE                           147  
000010AE  43F9 0000148E            148              LEA INIT_HEX,A1
000010B4  103C 000E                149              MOVE.B #14,D0       * Moving task 14 into Data Register 0
000010B8  4E4F                     150              TRAP #15            * Display the string at (A1) without CR, LF
000010BA                           151  
000010BA  45F9 00001106            152  DISPLAY_HEX LEA HEX_BITMASK,A2
000010C0  47F9 00001126            153              LEA HEX_VALUE,A3
000010C6                           154  
000010C6  E95A                     155              ROL #4,D2           * Shifts to read the next hexadecimal digit
000010C8  6100 0016                156              BSR LOOP_HEX        * Branch towards the loop of hex thingy
000010CC                           157  
000010CC  E95A                     158              ROL #4,D2           * I HATE THIS, SO MUCH REPEATING CODE
000010CE  6100 0010                159              BSR LOOP_HEX        * I TRIED EVERYTHING WITHOUT USING ANOTHER
000010D2  E95A                     160              ROL #4,D2           * DATA REGISTER. THAT IS SUCH A WASTE... GOSH
000010D4  6100 000A                161              BSR LOOP_HEX        * SO I'M GOING TO LEAVE THIS HERE, BECUASE I 
000010D8  E95A                     162              ROL #4,D2           * REALLY DON"T CARE. TOO MUCH TIME WAS WASTED
000010DA  6100 0004                163              BSR LOOP_HEX        * ANNND YES!! NO MORE BAD CODE (IT WORKS DEAL)
000010DE                           164  
000010DE  4E75                     165              RTS                 * Returns from subroutine
000010E0                           166  
000010E0  3602                     167  LOOP_HEX    MOVE.W D2,D3        * Move the current 16-bits into data register 3
000010E2  C652                     168              AND.W (A2),D3       * AND the current bitmask with temp instruction
000010E4  B652                     169              CMP.W (A2),D3       * Compares the current bitmask in (A2) with D3
000010E6  6600 0018                170              BNE NEXT_HEX
000010EA                           171  
000010EA  43D3                     172              LEA (A3),A1
000010EC  103C 000E                173              MOVE.B #14,D0       * Moving task 14 into Data Register 0
000010F0  4E4F                     174              TRAP #15            * Display the string at (A1) without CR, LF
000010F2                           175              
000010F2  45F9 00001106            176              LEA HEX_BITMASK,A2
000010F8  47F9 00001126            177              LEA HEX_VALUE,A3
000010FE  4E75                     178              RTS                 * Returns from subroutine
00001100                           179  
00001100  544A                     180  NEXT_HEX    ADDA.W #WORD,A2     * Shifts to the next binary
00001102  544B                     181              ADDA.W #WORD,A3     * Shifts to the next hexadecimal char
00001104  60DA                     182              BRA LOOP_HEX        * Go back to LOOP and test the new bitmask
00001106                           183  
00001106= 000F 000E 000D 0...      184  HEX_BITMASK DC.W $F,$E,$D,$C,$B,$A,$9,$8,$7,$6,$5,$4,$3,$2,$1,$0
00001126= 4600 4500 4400 4...      185  HEX_VALUE   DC.W 'F','E','D','C','B','A','9','8','7','6','5','4','3','2','1','0'
00001146                           186  
00001146                           187  
00001146                           188  ************************ 8-Bit Displacement Subroutine *************************
00001146                           189  * SubRoutine that displays a branching displacement as a hexadecimal value
00001146                           190  *
00001146                           191  
00001146                           192  DISPLACEMENT:
00001146                           193  
00001146                           194  *--- ERROR FILTER: Checks before printing a non existing branch ---*
00001146  3410                     195              MOVE.W (A0),D2      * Moving the current 16-bits address into D2
00001148  0242 FF00                196              ANDI.W #$FF00,D2
0000114C  B452                     197              CMP.W (A2),D2
0000114E  6600 0034                198              BNE  DISPLAY_DATA
00001152                           199  
00001152                           200  *--- PRINT OP: Prints the pre-loaded OP message to the output ---*
00001152  103C 000E                201              MOVE.B #14,D0       * Moving task 14 into Data Register 0
00001156  4E4F                     202              TRAP #15            * Display the string at (A1) without CR, LF
00001158                           203  
00001158                           204  
00001158                           205  *--- 8-bits 16-bits 32-bits ---*
00001158  3410                     206              MOVE.W (A0),D2      * Moving the current 16-bits address into D2
0000115A  4A02                     207              TST.B D2
0000115C  6700 0006                208              BEQ D_16_BIT
00001160  6000 000C                209              BRA D_8_BIT
00001164                           210  
00001164                           211  
00001164  5448                     212  D_16_BIT    ADDA.W #WORD,A0     * Shifts to the next set of 16-bits instruction
00001166  3410                     213              MOVE.W (A0),D2      * Moving the current 16-bits address into D2
00001168  D448                     214              ADD.W A0,D2
0000116A  6000 0012                215              BRA D_DONE          
0000116E                           216  
0000116E                           217  
0000116E  3410                     218  D_8_BIT     MOVE.W (A0),D2      * Moving the current 16-bits address into D2
00001170  C47C 00FF                219              AND.W #BITMASK8,D2
00001174  5442                     220              ADDQ #2,D2
00001176  0082 FFFFFF00            221              ORI.L #$FFFFFF00,D2
0000117C  D488                     222              ADD.L A0,D2
0000117E                           223  
0000117E  6100 FF3A                224  D_DONE      BSR DISPLAY_HEX 
00001182  4E75                     225              RTS
00001184                           226  
00001184                           227  
00001184                           228  *******************************  DATA Subroutine *******************************
00001184                           229  *1000    DATA    $WXYZ
00001184                           230  *
00001184                           231  DISPLAY_DATA:
00001184                           232              
00001184  43F9 00001493            233              LEA DATA_M,A1
0000118A  103C 000E                234              MOVE.B #14,D0       * Moving task 14 into Data Register 0
0000118E  4E4F                     235              TRAP #15            * Display the string at (A1) without CR, LF
00001190                           236  
00001190  43F9 00001491            237              LEA INIT_MEM,A1
00001196  103C 000E                238              MOVE.B #14,D0       * Moving task 14 into Data Register 0
0000119A  4E4F                     239              TRAP #15            * Display the string at (A1) without CR, LF
0000119C                           240  
0000119C  3410                     241              MOVE.W (A0),D2
0000119E  6100 FF1A                242              BSR DISPLAY_HEX 
000011A2  4E75                     243              RTS
000011A4                           244  
000011A4                           245  
000011A4                           246  ************************* Effective Address Algorithm **************************
000011A4                           247  *-------------------------------------------------------------------------------
000011A4                           248  * Type 1 mode xxxx xxxx ssoo oorrr
000011A4                           249  * SubRoutine for handling One Operand addressing looking for a mode and register 
000011A4                           250  * value
000011A4                           251  * Written by: David Heidgerken
000011A4                           252  * Description.  16 bit Instruction will be passed to subroutine via D7
000011A4                           253  * and will parse it to find which address mode and location is being used.
000011A4                           254  * D6 used for Register value, D5 is mode D4 is the Size
000011A4                           255  *-------------------------------------------------------------------------------
000011A4  1C3C 0007                256  EA_TYPE1    MOVE.B  #%00000111, D6  ;move primative 3 bit mask into D3 
000011A8  1A3C 0007                257              MOVE.B  #%00000111, D5  ;move primative 3 bitmask into D4
000011AC  E74D                     258              LSL.W   #3,D5           ;shift mask in D5 left 3 times
000011AE  383C 00C0                259              MOVE.W  #%11000000, D4  ;move size mask into D4
000011B2                           260  
000011B2  CC47                     261              AND.W   D7,D6           ;and D7 and D6 store in D6 Register
000011B4  CA47                     262              AND.W   D7,D5           ;and D7 and D5 store in D5 Mode
000011B6  C847                     263              AND.W   D7,D4           ;and D7 and D4 store in D4 Size
000011B8                           264              
000011B8                           265              ; BSR                       ;return to calling instruction
000011B8                           266  
000011B8                           267  *-------------------------------------------------------------------------------
000011B8                           268  * Type 2 xxxx xxxx dddd dddd
000011B8                           269  * SubRoutine for handling One Operand Displacement.
000011B8                           270  * Written by: David Heidgerken
000011B8                           271  * Description.  16 bit Instruction will be passed to subroutine via D7
000011B8                           272  * and will parse the instruciton to determine the offset being used stored in D6
000011B8                           273  *-------------------------------------------------------------------------------
000011B8  1C3C 00FF                274  EA_TYPE2    MOVE.B  #%11111111, D6  ;move 8bitmask into D6
000011BC  CC87                     275              AND.L   D7,D6           ;and D7 with D6(Offset)
000011BE                           276              ; BSR
000011BE                           277  
000011BE                           278  *-------------------------------------------------------------------------------
000011BE                           279  * Type 3 xxxx rrrooo oorrr
000011BE                           280  * SubRoutine for handling two Operand Effective addressing to find 2 3 bit modes
000011BE                           281  * and two 3 bit registers
000011BE                           282  * Written by: David Heidgerken
000011BE                           283  * Description.  16 bit Instruction will be passed to subroutine via D7
000011BE                           284  * and will parse the last 12 bits to determine the addressing mode and 
000011BE                           285  * locations of the data.
000011BE                           286  * source register stored in D3, source mode in D4 Dest mode in D5 dest register
000011BE                           287  * in D6
000011BE                           288  *-------------------------------------------------------------------------------            
000011BE  1C3C 0007                289  EA_TYPE3    MOVE.B  #BITMASK3, D6   ;move primative 3 bit mask into D6
000011C2  1A3C 0007                290              MOVE.B  #BITMASK3, D5   ;move primative 3 bitmask into D5
000011C6  183C 0007                291              MOVE.B  #BITMASK3, D4   ;move primative 3 bit mask into D4
000011CA  163C 0007                292              MOVE.B  #BITMASK3, D3   ;move primative 3 bit mask into D3
000011CE                           293              
000011CE  E74D                     294              LSL.W   #3,D5           ;shift mask left 3 times
000011D0  ED4C                     295              LSL.W   #6,D4           ;shift mask left 6 times
000011D2  ED4B                     296              LSL.W   #6,D3           ;shift mask left 6 times
000011D4  ED4B                     297              LSL.W   #6,D3           ;shift mask left 3 times
000011D6                           298              
000011D6  CC87                     299              AND.L   D7,D6           ;and D7 with D6 DestRegister
000011D8  CA87                     300              AND.L   D7,D5           ;and D7 with D5 DestMode
000011DA  C887                     301              AND.L   D7,D4           ;and D7 with D4 SrcMode
000011DC  C687                     302              AND.L   D7,D3           ;and D7 with D3 SrcRegister
000011DE                           303              
000011DE                           304              ; BSR
000011DE                           305              
000011DE                           306  *-------------------------------------------------------------------------------
000011DE                           307  * Type 4   - xxxx DDD1 ssoo orrr
000011DE                           308  * Sub Routine to find Size and EA(mode and Register) and Data from instruction
000011DE                           309  * D3 stores Databits
000011DE                           310  * D4 Stores Size
000011DE                           311  * D5 stores Mode
000011DE                           312  * D6 stores Register
000011DE                           313  *-------------------------------------------------------------------------------            
000011DE  1C3C 0007                314  EA_TYPE4    MOVE.B  #%00000111, D6  ;move primative 3 bit mask into D3 
000011E2  1A3C 0007                315              MOVE.B  #%00000111, D5  ;move primative 3 bitmask into D4
000011E6  E74D                     316              LSL.W   #3,D5           ;shift mask in D5 left 3 times
000011E8  383C 00C0                317              MOVE.W  #%11000000, D4  ;move size mask into D4
000011EC  363C 000E                318              MOVE.W  #%00001110, D3  ; move Datamask into D3
000011F0  E14B                     319              LSL.W   #8,D3           ; shift datamask 8 places
000011F2                           320              
000011F2  CC47                     321              AND.W   D7,D6           ;and D7 and D6 store in D6 Register
000011F4  CA47                     322              AND.W   D7,D5           ;and D7 and D5 store in D5 Mode
000011F6  C847                     323              AND.W   D7,D4           ;and D7 and D4 store in D4 Size
000011F8  C647                     324              AND.W   D7,D3           ;and D7 and D3 store in D3 Data
000011FA                           325      
000011FA                           326              ; BSR                       ;return to calling instruction
000011FA                           327  
000011FA                           328  *-------------------------------------------------------------------------------
000011FA                           329  * Type 5 mode xxxx xDxx ssoo oorrr
000011FA                           330  * SubRoutine for handling One Operand addressing looking for a mode and register 
000011FA                           331  * value
000011FA                           332  * Written by: David Heidgerken
000011FA                           333  * Description.  16 bit Instruction will be passed to subroutine via D7
000011FA                           334  * and will parse it to find which address mode and location is being used.
000011FA                           335  * D6 used for Register value, D5 is mode D4 is the Size D3 is direction bit
000011FA                           336  *-----------------------------------------------------------------------------
000011FA  1C3C 0007                337  EA_TYPE5    MOVE.B  #%00000111, D6  ;move primative 3 bit mask into D3 
000011FE  1A3C 0007                338              MOVE.B  #%00000111, D5  ;move primative 3 bitmask into D4
00001202  E74D                     339              LSL.W   #3,D5           ;shift mask in D5 left 3 times
00001204  383C 00C0                340              MOVE.W  #%11000000, D4  ;move size mask into D4
00001208  363C 0004                341              MOVE.W  #%00000100, D3  ;move data mask into D3
0000120C  E14B                     342              LSL.W   #8,D3           ;shift mask 8 bits in D3
0000120E                           343  
0000120E                           344              
0000120E  CC47                     345              AND.W   D7,D6           ;and D7 and D6 store in D6 Register
00001210  CA47                     346              AND.W   D7,D5           ;and D7 and D5 store in D5 Mode
00001212  C847                     347              AND.W   D7,D4           ;and D7 and D4 store in D4 Size
00001214  C647                     348              AND.W   D7,D3           ;and D7 and D3 store in D3 Direction
00001216                           349              ; BSR                       ;return to calling instruction
00001216                           350  
00001216                           351  *-------------------------------------------------------------------------------
00001216                           352  * Type 6 mode xxxx DDDx ssix xrrr   
00001216                           353  * Subroutine for Shift and rotate funcitons
00001216                           354  * D3 - stores Data
00001216                           355  * D4 -stores Size
00001216                           356  * D5 stores i(imediate or Register)
00001216                           357  * D6 stores register
00001216                           358  *-------------------------------------------------------------------------------
00001216  163C 000E                359  EA_TYPE6    MOVE.B  #%00001110, D3  ;move data maskinto D3
0000121A  E14B                     360              LSL.W   #8,D3           ; Shift it left into the upper 8 bytes
0000121C  183C 00C0                361              MOVE.B  #%11000000, D4  ;move size masking into D4
00001220  1A3C 0020                362              MOVE.B  #%00100000, D5  ;move i masking into D5
00001224  1C3C 0007                363              MOVE.B  #%00000111, D6  ;move register mask into D6
00001228                           364              
00001228  C647                     365              AND.W   D7,D3           ;value of Data in D3
0000122A  C847                     366              AND.W   D7,D4           ;value of size in D4
0000122C  CA47                     367              AND.W   D7,D5           ;value of i in D5
0000122E  CC47                     368              AND.W   D7,D6           ;value of register in D6
00001230                           369              ; BSR
00001230                           370  
00001230                           371  
00001230                           372  ******************** OP-CODE: Individual Task Subroutine Set *******************
00001230                           373  
00001230                           374  *- 000 -------------------------------------------
00001230= 52 4F 4C 00              375  ROL_M       DC.B    'ROL',0     * Tested    0xE118
00001234  43F8 1230                376  ROL_T       LEA ROL_M,A1
00001238  103C 000E                377              MOVE.B #14,D0       * Moving task 14 into Data Register 0
0000123C  4E4F                     378              TRAP #15            * Display the string at (A1) without CR, LF
0000123E  4E75                     379              RTS
00001240                           380  *- 001 -------------------------------------------
00001240= 4C 53 4C 00              381  LSL_M       DC.B    'LSL',0     * Tested    0xE108
00001244  43F8 1240                382  LSL_T       LEA LSL_M,A1
00001248  103C 000E                383              MOVE.B #14,D0
0000124C  4E4F                     384              TRAP #15
0000124E  4E75                     385              RTS
00001250                           386  *- 002 -------------------------------------------
00001250= 41 53 4C 00              387  ASL_M       DC.B    'ASL',0     * Tested    0xE100
00001254  43F8 1250                388  ASL_T       LEA ASL_M,A1
00001258  103C 000E                389              MOVE.B #14,D0
0000125C  4E4F                     390              TRAP #15
0000125E  4E75                     391              RTS
00001260                           392  *- 003 -------------------------------------------
00001260= 52 4F 52 00              393  ROR_M       DC.B    'ROR',0     * Tested    0xE018
00001264  43F8 1260                394  ROR_T       LEA ROR_M,A1
00001268  103C 000E                395              MOVE.B #14,D0
0000126C  4E4F                     396              TRAP #15
0000126E  4E75                     397              RTS
00001270                           398  *- 004 -------------------------------------------
00001270= 4C 53 52 00              399  LSR_M       DC.B    'LSR',0     * Tested    0xE008
00001274  43F8 1270                400  LSR_T       LEA LSR_M,A1
00001278  103C 000E                401              MOVE.B #14,D0
0000127C  4E4F                     402              TRAP #15
0000127E  4E75                     403              RTS
00001280                           404  *- 005 -------------------------------------------
00001280= 41 53 52 00              405  ASR_M       DC.B    'ASR',0     * Tested    0xE000
00001284  43F8 1280                406  ASR_T       LEA ASR_M,A1
00001288  103C 000E                407              MOVE.B #14,D0
0000128C  4E4F                     408              TRAP #15
0000128E  4E75                     409              RTS
00001290                           410  *- 006 -------------------------------------------
00001290= 41 44 44 41 00           411  ANDA_M      DC.B    'ADDA',0    * Tested    0xD0C0
00001296  43F8 1290                412  ANDA_T      LEA ANDA_M,A1
0000129A  103C 000E                413              MOVE.B #14,D0
0000129E  4E4F                     414              TRAP #15
000012A0  4E75                     415              RTS
000012A2                           416  *- 007 -------------------------------------------
000012A2= 41 44 44 00              417  ADD_M       DC.B    'ADD',0     * Tested    0xD000
000012A6  43F8 12A2                418  ADD_T       LEA ADD_M,A1
000012AA  103C 000E                419              MOVE.B #14,D0
000012AE  4E4F                     420              TRAP #15
000012B0  4E75                     421              RTS
000012B2                           422  *- 008 -------------------------------------------
000012B2= 4D 55 4C 53 00           423  MULS_M      DC.B    'MULS',0    * Issue     0xC1C0
000012B8  43F8 12B2                424  MULS_T      LEA MULS_M,A1
000012BC  103C 000E                425              MOVE.B #14,D0
000012C0  4E4F                     426              TRAP #15
000012C2  4E75                     427              RTS
000012C4                           428  *- 009 -------------------------------------------
000012C4= 43 4D 50 00              429  CMP_M       DC.B    'CMP',0                 0xB000
000012C8  43F8 12C4                430  CMP_T       LEA CMP_M,A1
000012CC  103C 000E                431              MOVE.B #14,D0
000012D0  4E4F                     432              TRAP #15
000012D2  4E75                     433              RTS
000012D4                           434  *- 010 -------------------------------------------
000012D4= 53 55 42 00              435  SUB_M       DC.B    'SUB',0                 0x9000
000012D8  43F8 12D4                436  SUB_T       LEA SUB_M,A1
000012DC  103C 000E                437              MOVE.B #14,D0
000012E0  4E4F                     438              TRAP #15
000012E2  4E75                     439              RTS
000012E4                           440  *- 011 -------------------------------------------
000012E4= 44 49 56 53 00           441  DIVS_M      DC.B    'DIVS',0    * Issue     0x81C0
000012EA  43F8 12E4                442  DIVS_T      LEA DIVS_M,A1
000012EE  103C 000E                443              MOVE.B #14,D0
000012F2  4E4F                     444              TRAP #15
000012F4  4E75                     445              RTS
000012F6                           446  *- 012 -------------------------------------------
000012F6= 4F 52 00                 447  OR_M        DC.B    'OR',0                  0x8000
000012FA  43F8 12F6                448  OR_T        LEA OR_M,A1
000012FE  103C 000E                449              MOVE.B #14,D0
00001302  4E4F                     450              TRAP #15
00001304  4E75                     451              RTS
00001306                           452  *- 013 -------------------------------------------
00001306= 42 4C 54 20 00           453  BLT_M       DC.B    'BLT ',0                0x6D00
0000130C  43F8 1306                454  BLT_T       LEA BLT_M,A1
00001310  6100 FE34                455              BSR DISPLACEMENT
00001314  4E75                     456              RTS
00001316                           457  *- 014 -------------------------------------------
00001316= 42 47 45 20 00           458  BGE_M       DC.B    'BGE ',0                0x6C00
0000131C  43F8 1316                459  BGE_T       LEA BGE_M,A1
00001320  6100 FE24                460              BSR DISPLACEMENT
00001324  4E75                     461              RTS
00001326                           462  *- 015 -------------------------------------------
00001326= 42 56 43 20 00           463  BVC_M       DC.B    'BVC ',0                0x6800
0000132C  43F8 1326                464  BVC_T       LEA BVC_M,A1
00001330  6100 FE14                465              BSR DISPLACEMENT
00001334  4E75                     466              RTS
00001336                           467  *- 016 -------------------------------------------
00001336= 42 43 53 20 00           468  BCS_M       DC.B    'BCS ',0                0x6500
0000133C  43F8 1336                469  BCS_T       LEA BCS_M,A1
00001340  6100 FE04                470              BSR DISPLACEMENT
00001344  4E75                     471              RTS
00001346                           472  *- 017 -------------------------------------------
00001346= 42 52 41 20 00           473  BRA_M       DC.B    'BRA ',0                0x6000
0000134C  43F8 1346                474  BRA_T       LEA BRA_M,A1
00001350  6100 FDF4                475              BSR DISPLACEMENT
00001354  4E75                     476              RTS
00001356                           477  *- 018 -------------------------------------------
00001356= 53 55 42 51 00           478  SUBQ_M      DC.B    'SUBQ',0                0x5100
0000135C  43F8 1356                479  SUBQ_T      LEA SUBQ_M,A1
00001360  103C 000E                480              MOVE.B #14,D0
00001364  4E4F                     481              TRAP #15
00001366  4E75                     482              RTS
00001368                           483  *- 019 -------------------------------------------
00001368= 4A 53 52 00              484  JSR_M       DC.B    'JSR',0     * Tested    0x4E80
0000136C  43F8 1368                485  JSR_T       LEA JSR_M,A1
00001370  103C 000E                486              MOVE.B #14,D0
00001374  4E4F                     487              TRAP #15
00001376  4E75                     488              RTS
00001378                           489  *- 020 -------------------------------------------
00001378= 52 54 53 00              490  RTS_M       DC.B    'RTS',0     * Tested    0x4E75
0000137C  43F8 1378                491  RTS_T       LEA RTS_M,A1
00001380  103C 000E                492              MOVE.B #14,D0
00001384  4E4F                     493              TRAP #15
00001386  4E75                     494              RTS
00001388                           495  *- 021 -------------------------------------------
00001388= 4E 4F 50 00              496  NOP_M       DC.B    'NOP',0     * Tested    0x4E71
0000138C  43F8 1388                497  NOP_T       LEA NOP_M,A1
00001390  103C 000E                498              MOVE.B #14,D0
00001394  4E4F                     499              TRAP #15
00001396  4E75                     500              RTS
00001398                           501  *- 022 -------------------------------------------
00001398= 4D 4F 56 45 4D 00        502  MOVEM_M     DC.B    'MOVEM',0               0x4880
0000139E  43F8 1398                503  MOVEM_T     LEA MOVEM_M,A1
000013A2  103C 000E                504              MOVE.B #14,D0
000013A6  4E4F                     505              TRAP #15
000013A8  4E75                     506              RTS
000013AA                           507  *- 023 -------------------------------------------
000013AA= 4E 45 47 00              508  NEG_M       DC.B    'NEG',0     * Tested    0x4400
000013AE  43F8 13AA                509  NEG_T       LEA NEG_M,A1
000013B2  103C 000E                510              MOVE.B #14,D0
000013B6  4E4F                     511              TRAP #15
000013B8  4E75                     512              RTS
000013BA                           513  *- 024 -------------------------------------------
000013BA= 4C 45 41 00              514  LEA_M       DC.B    'LEA',0                 0x41C0
000013BE  43F8 13BA                515  LEA_T       LEA LEA_M,A1
000013C2  103C 000E                516              MOVE.B #14,D0
000013C6  4E4F                     517              TRAP #15
000013C8  4E75                     518              RTS
000013CA                           519  *- 025 -------------------------------------------
000013CA= 4D 4F 56 45 41 2E ...    520  MOAW_M      DC.B    'MOVEA.W',0             0x3040
000013D2  43F8 13CA                521  MOAW_T      LEA MOAW_M,A1
000013D6  103C 000E                522              MOVE.B #14,D0
000013DA  4E4F                     523              TRAP #15
000013DC  4E75                     524              RTS
000013DE                           525  *- 026 -------------------------------------------
000013DE= 4D 4F 56 45 2E 57 00     526  MOW_M       DC.B    'MOVE.W',0              0x3000
000013E6  43F8 13DE                527  MOW_T       LEA MOW_M,A1
000013EA  103C 000E                528              MOVE.B #14,D0
000013EE  4E4F                     529              TRAP #15
000013F0  4E75                     530              RTS
000013F2                           531  *- 027 -------------------------------------------
000013F2= 4D 4F 56 45 41 2E ...    532  MOAL_M      DC.B    'MOVEA.L',0             0x2040
000013FA  43F8 13F2                533  MOAL_T      LEA MOAL_M,A1
000013FE  103C 000E                534              MOVE.B #14,D0
00001402  4E4F                     535              TRAP #15
00001404  4E75                     536              RTS
00001406                           537  *- 028 -------------------------------------------
00001406= 4D 4F 56 45 2E 4C 00     538  MOL_M       DC.B    'MOVE.L',0              0x2000
0000140E  43F8 1406                539  MOL_T       LEA MOL_M,A1
00001412  103C 000E                540              MOVE.B #14,D0
00001416  4E4F                     541              TRAP #15
00001418  4E75                     542              RTS
0000141A                           543  *- 029 -------------------------------------------
0000141A= 4D 4F 56 45 2E 42 00     544  MOB_M       DC.B    'MOVE.B',0              0x1000
00001422  43F8 141A                545  MOB_T       LEA MOB_M,A1
00001426  103C 000E                546              MOVE.B #14,D0
0000142A  4E4F                     547              TRAP #15
0000142C  4E75                     548              RTS
0000142E                           549  *- 030 -------------------------------------------
0000142E= 43 4D 50 49 00           550  CMPI_M      DC.B    'CMPI',0                0x0C00
00001434  43F8 142E                551  CMPI_T      LEA CMPI_M,A1
00001438  103C 000E                552              MOVE.B #14,D0
0000143C  4E4F                     553              TRAP #15
0000143E  4E75                     554              RTS
00001440                           555  *- 031 -------------------------------------------
00001440= 42 43 4C 52 00           556  BCLR_M      DC.B    'BCLR',0                0x01C0
00001446  43F8 1440                557  BCLR_T      LEA BCLR_M,A1
0000144A  103C 000E                558              MOVE.B #14,D0
0000144E  4E4F                     559              TRAP #15
00001450  4E75                     560              RTS
00001452                           561  *- 032 -------------------------------------------
00001452= 4F 52 49 00              562  ORI_M       DC.B    'ORI',0                 0x0000
00001456  43F8 1452                563  ORI_T       LEA ORI_M,A1
0000145A  103C 000E                564              MOVE.B #14,D0
0000145E  4E4F                     565              TRAP #15
00001460  4E75                     566              RTS
00001462                           567  
00001462                           568  *-------------------------------- Data Section ---------------------------------
00001462                           569  
00001462= 41 44 44 52 45 53 ...    570  HEADER      DC.B    'ADDRESS   OP-CODE  OPERAND          INSTRUCTION', 0 
0000148E= 30 78 00                 571  INIT_HEX    DC.B    '0x',0
00001491= 24 00                    572  INIT_MEM    DC.B    '$',0
00001493= 44 41 54 41 20 00        573  DATA_M      DC.B    'DATA ',0
00001499= 0D 0A 00                 574  NEWLINE     DC.B  CR,LF,0
0000149C                           575  
0000149C= 0001                     576  POSITION    DC.W  $0001
0000149E                           577  
0000149E                           578  ; Byte_M        DC.B  '.B ',0
0000149E                           579  ; Word_M        DC.B  '.W ',0
0000149E                           580  ; Long_M        DC.B  '.L ',0
0000149E                           581  
0000149E                           582  *---------------------------- Task Operation List ------------------------------
0000149E                           583  * The values for this constant are set to move in parallel with those of
0000149E                           584  * the constant BITMASK via steps at label NEXT_MASK.
0000149E                           585  
0000149E= 1234 1244 1254 1...      586  TASK_OP     DC.W ROL_T,LSL_T,ASL_T,ROR_T,LSR_T,ASR_T,ANDA_T,ADD_T,MULS_T,CMP_T
000014B2= 12D8 12EA 12FA 1...      587              DC.W SUB_T,DIVS_T,OR_T,BLT_T,BGE_T,BVC_T,BCS_T,BRA_T,SUBQ_T,JSR_T
000014C6= 137C 138C 139E 1...      588              DC.W RTS_T,NOP_T,MOVEM_T,NEG_T,LEA_T,MOAW_T,MOW_T,MOAL_T,MOL_T,MOB_T
000014DA= 1434 1446 1456 0000      589              DC.W CMPI_T,BCLR_T,ORI_T,0
000014E2                           590  
000014E2                           591  *--------------------------- Bitmask Translation List --------------------------
000014E2= E118 E108 E100 E...      592  BITMASK     DC.W $E118,$E108,$E100,$E018,$E008,$E000,$D0C0,$D000,$C1C0,$B000
000014F6= 9000 81C0 8000 6...      593              DC.W $9000,$81C0,$8000,$6D00,$6C00,$6800,$6500,$6000,$5100,$4E80
0000150A= 4E75 4E71 4880 4...      594              DC.W $4E75,$4E71,$4880,$4400,$41C0,$3040,$3000,$2040,$2000,$1000
0000151E= 0C00 01C0 0000 0000      595              DC.W $0C00,$01C0,$0000,0
00001526                           596  
00001526                           597  *--------------------------------- Source Code ---------------------------------
00001526                           598  ; SOURCE_C    DC.W  $4E75,$D6C7,$4EB8,$4487,$D5C2,$4E71,$4EB9,$D280,$4E71,$4E75
00001526                           599  ;                  RTS   ADDA  JSR   NEG   ADDA  NOP   JSR   ADD   NOP   RTS
00001526                           600              ; DC.W  $66FC,$EE45,$E6AA,$E439,$2646,$EF45,$62FC,$E539,$303C
00001526                           601  ;                  DATA  ASR   LSR   ROR   MOVEA ASL   DATA  ROL   MOVE.W
00001526                           602              ; DC.W  $E539,$6078,$EF45,$68CD,$BBBB,$E6AA,$EE45,$85C3,$0001,0
00001526                           603  ;                  ROL   BRA   ASL   BVC   ERROR LSR   ASR   DIVS  TEST
00001526                           604  
00001526                           605  **** Displacement TESTING - REMOVE WHEN DONE ****
00001526                           606  ; SOURCE_C  DC.W    $4E71,$3204,$B045,$66F8,$6DFA,$4E71,$3A0B,$61F4,$60EE,$65FA,0
00001526                           607  ; SOURCE_C  DC.W    $2803,$6FFC,$6EFC,$6DFC,$6CFC,$6BFC,$6AFC,$69FC,$68FC,$67FC
00001526                           608  ;           DC.W    $66FC,$65FC,$64FC,$63FC,$62FC,$60FC,0
00001526= 3202 6D00 000C 3...      609  SOURCE_C    DC.W    $3202,$6D00,$000C,$3C0B,$6000,$0004,$3201,$4E71,$5241,0
0000153A                           610  
0000153A                           611  
0000153A                           612      END     START               * last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD_M               12A2
ADD_T               12A6
ANDA_M              1290
ANDA_T              1296
ASL_M               1250
ASL_T               1254
ASR_M               1280
ASR_T               1284
BCLR_M              1440
BCLR_T              1446
BCS_M               1336
BCS_T               133C
BGE_M               1316
BGE_T               131C
BITMASK             14E2
BITMASK3            7
BITMASK4            F
BITMASK8            FF
BLT_M               1306
BLT_T               130C
BRA_M               1346
BRA_T               134C
BVC_M               1326
BVC_T               132C
CMPI_M              142E
CMPI_T              1434
CMP_M               12C4
CMP_T               12C8
CR                  D
DATA_M              1493
DISPLACEMENT        1146
DISPLAY_DATA        1184
DISPLAY_HEX         10BA
DISPLAY_INT         109E
DIVS_M              12E4
DIVS_T              12EA
D_16_BIT            1164
D_8_BIT             116E
D_DONE              117E
EA_TYPE1            11A4
EA_TYPE2            11B8
EA_TYPE3            11BE
EA_TYPE4            11DE
EA_TYPE5            11FA
EA_TYPE6            1216
EXIT                2700
HEADER              1462
HELP_HEX            1070
HEX_BITMASK         1106
HEX_VALUE           1126
INIT_HEX            148E
INIT_MEM            1491
INIT_OP             1022
JSR_M               1368
JSR_T               136C
LEA_M               13BA
LEA_T               13BE
LF                  A
LOOP_HEX            10E0
LOOP_OP             1034
LSL_M               1240
LSL_T               1244
LSR_M               1270
LSR_T               1274
MOAL_M              13F2
MOAL_T              13FA
MOAW_M              13CA
MOAW_T              13D2
MOB_M               141A
MOB_T               1422
MOL_M               1406
MOL_T               140E
MOVEM_M             1398
MOVEM_T             139E
MOW_M               13DE
MOW_T               13E6
MULS_M              12B2
MULS_T              12B8
NEG_M               13AA
NEG_T               13AE
NEWLINE             1499
NEXT_HEX            1100
NEXT_MASK           1088
NOP_M               1388
NOP_T               138C
NW_A                1060
ORI_M               1452
ORI_T               1456
OR_M                12F6
OR_T                12FA
POSITION            149C
ROL_M               1230
ROL_T               1234
ROR_M               1260
ROR_T               1264
RTS_M               1378
RTS_T               137C
SHIFT_OP            1090
SOURCE_C            1526
START               1000
SUBQ_M              1356
SUBQ_T              135C
SUB_M               12D4
SUB_T               12D8
TASK_OP             149E
WORD                2
