00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 12/1/2014 2:28:21 AM

00000000                             1  *-------------------------------------------------------------------------------
00000000                             2  * Title      : Dissassembler
00000000                             3  * Written by : Ryan Aarestad, David Heidgerken, Matthew Ramos
00000000                             4  * Date       : Thursday November 6, 2014
00000000                             5  * Description: Assembly language program that can read a string of binary and
00000000                             6  *              decode it into Assembly language instructions.  
00000000                             7  *-------------------------------------------------------------------------------
00000000                             8  
00000000                             9              OPT   CRE
00000000                            10  
00000000  =0000000D                 11  CR          EQU   $000D
00000000  =0000000A                 12  LF          EQU   $000A
00000000  =00001000                 13  START       EQU   $1000         * Program starting address
00000000  =00002700                 14  EXIT        EQU   $2700         * Simulator stoping code
00000000  =00000002                 15  WORD        EQU   $0002         * Advance address by a word
00000000                            16  
00000000  =000000FF                 17  BITMASK8    EQU   $00FF
00000000  =0000000F                 18  BITMASK4    EQU   $000F
00000000  =00000007                 19  BITMASK3    EQU   $0007
00000000                            20  
00000000                            21  *----------------------- Address Register / Data Register ----------------------
00000000                            22  * A0: Designated for Source Code
00000000                            23  * A1: Designated for Displaying string to the output
00000000                            24  * A2: Designated for OP Bitmask list / Hexadecimal Bitmask list
00000000                            25  * A3: Designated for Task Operation list / Hexadecimal value list
00000000                            26  * A4: 
00000000                            27  * A5: 
00000000                            28  * A6: 
00000000                            29  
00000000                            30  
00000000                            31  * D0: Designated for task code values while using TRAP #15
00000000                            32  * D1: Main 16-bits copy of the instructions (PRINTING PURPOSES) / Task 11
00000000                            33  * D2: Hexadecimal Temp convert
00000000                            34  * D3: Temporary 16-bits for bitmask comparison
00000000                            35  * D4: 
00000000                            36  * D5: 
00000000                            37  * D6: 
00000000                            38  * D7: 
00000000                            39  
00000000                            40  *------------------- Main Program / Initial Starting Point ---------------------
00000000                            41  
00001000                            42              ORG    START        * Program begins here
00001000                            43  
00001000  43F9 0000148A             44              LEA HEADER,A1       * Load Dissassembler header message into A1 
00001006  103C 000D                 45              MOVE.B #13,D0       * Move task 13 into Data Register 0
0000100A  4E4F                      46              TRAP #15            * Display the string at (A1) with CR, LF.
0000100C                            47  
0000100C  41F9 00001552             48              LEA SOURCE_C,A0     * Load the source code into address register 0
00001012                            49  
00001012  6100 000E                 50              BSR INIT_OP         * Hunts down each Operation code like a mad man
00001016                            51  
00001016  33FC 0001 000014C4        52              MOVE.W #$0001,POSITION  *** TEST - RESET POSITION ***
0000101E                            53  
0000101E  4E72 2700                 54              STOP #EXIT          * Halt Simulator
00001022                            55  
00001022                            56  
00001022                            57  ********************* OP-CODE Looping Algorithm Subroutine *********************
00001022                            58  
00001022                            59  INIT_OP     * Resets the list of bitmasks & english to the begining
00001022                            60  
00001022                            61  
00001022                            62  *--- Displaying the current address as a hexadecimal value ---*
00001022  3408                      63              MOVE.W A0,D2        * Moving the current 16-bits address into D2
00001024  6100 009C                 64              BSR DISPLAY_HEX 
00001028                            65  
00001028                            66  
00001028  45F9 0000150E             67              LEA BITMASK,A2      * Load the bitmask list into address register 2
0000102E  47F9 000014CA             68              LEA TASK_OP,A3      * Load the OP task list into address register 3
00001034                            69  
00001034                            70  
00001034  3610                      71  LOOP_OP     MOVE.W (A0),D3      * Move the current 16-bits into data register 3
00001036  C652                      72              AND.W (A2),D3       * AND the current bitmask with temp instruction
00001038  B652                      73              CMP.W (A2),D3       * Compares the current bitmask in (A2) with D3
0000103A  6600 0050                 74              BNE NEXT_MASK       * No Match found branch to the NEXT_MASK
0000103E                            75              
0000103E                            76  
0000103E                            77  *--- Moving the cursor to the desired location ---*
0000103E  103C 000B                 78              MOVE.B #11,D0       * Moving task 11 into Data Register 0
00001042  3239 000014C4             79              MOVE.W POSITION,D1  * Setting up the desired row position
00001048  0641 0A00                 80              ADDI.W #$0A00,D1    * Setting up the desired column position
0000104C  4E4F                      81              TRAP #15            * Position the cursor at [0Axx] x - any number
0000104E                            82  
0000104E  23C8 000014C6             83              MOVE.L A0,SAVE_STATE    ******  TESTING BETA  ******
00001054                            84  
00001054                            85  *--- Retrieve matched task then execute by jumping to subroutine  ---*
00001054  3653                      86              MOVEA.W (A3),A3     * Moves the task address into the same (An)
00001056  4E93                      87              JSR (A3)            * Jumps to the current task subroutine from A3
00001058                            88  
00001058                            89  
00001058                            90  *--- Displaying the current instruction as a hexadecimal value ---*
00001058                            91  
00001058  2879 000014C6             92              MOVEA.L SAVE_STATE,A4   ******  TESTING BETA  ******
0000105E                            93  
0000105E  341C                      94              MOVE.W (A4)+,D2     * Reloads the orignal 16-bits as a temp again
00001060  6100 0040                 95              BSR DISPLAY_INT     * Display the current 16-bits in Hexadecimal
00001064                            96      
00001064                            97  
00001064  B450                      98  CHECK_VALUE CMP.W (A0),D2           ******  TESTING BETA  ******
00001066  6700 0014                 99              BEQ NW_A                ******  TESTING BETA  ******
0000106A                           100  
0000106A  103C 000B                101              MOVE.B #11,D0       * Moving task 11 into Data Register 0
0000106E  0641 0500                102              ADDI #$0500,D1          ******  TESTING BETA  ******
00001072  4E4F                     103              TRAP #15            * Position the cursor at [2Cxx] x - any number
00001074                           104  
00001074  341C                     105              MOVE.W (A4)+,D2         ******  TESTING BETA  ******
00001076  6100 004A                106              BSR DISPLAY_HEX         ******  TESTING BETA  ******
0000107A  60E8                     107              BRA CHECK_VALUE         ******  TESTING BETA  ******
0000107C                           108  
0000107C                           109  
0000107C  43F9 000014C1            110  NW_A        LEA NEWLINE,A1      * Loading NEWLINE into (A1) for next instruction
00001082  103C 000E                111              MOVE.B #14,D0       * Moving task 14 into Data Register 0
00001086  4E4F                     112              TRAP #15            * Display the string at (A1) without CR, LF
00001088                           113  
00001088  6000 000A                114              BRA SHIFT_OP            * Shifts to the next 16-bits of the source code
0000108C                           115  
0000108C                           116  
0000108C                           117  *---------------------- Advancing Bitmask & OP Task list -----------------------
0000108C                           118  
0000108C  544A                     119  NEXT_MASK   ADDA.W #WORD,A2     * Shifts to the next bitmask
0000108E  544B                     120              ADDA.W #WORD,A3     * Shifts to the next OP Name
00001090                           121  
00001090  4A53                     122              TST.W (A3)          * Did I reach the end of the English list?
00001092  66A0                     123              BNE LOOP_OP         * Go back to LOOP_OP and test the new bitmask
00001094                           124  
00001094  5448                     125  SHIFT_OP    ADDA.W #WORD,A0     * Shifts to the next set of 16-bits instruction
00001096                           126  
00001096  5279 000014C4            127              ADDQ.W #1,POSITION  *** IMPORTANT: Shifts the row position by 1 ***
0000109C                           128  
0000109C  4A50                     129              TST.W (A0)          * See if you reached the end of the instructions
0000109E  6682                     130              BNE INIT_OP         * (!=) Resets the bitmask & OP task lists
000010A0  4E75                     131              RTS                 * Returns from subroutine
000010A2                           132  
000010A2                           133  
000010A2                           134  ************************ Display Hexadecimal Subroutine ************************
000010A2                           135  * Displays an output of a single 16-bit instruction as a hexadecimal value
000010A2                           136  * Take that prof. Nash (mostly Kim), I didn't want to use task #15 anyway
000010A2                           137  
000010A2                           138  *** IMPORTANT *** Load the value that you wish to display in hexadecimal in D2
000010A2                           139      
000010A2                           140  DISPLAY_INT:
000010A2                           141  *--- Moving the cursor to the desired location ---*
000010A2  103C 000B                142              MOVE.B #11,D0       * Moving task 11 into Data Register 0
000010A6  3239 000014C4            143              MOVE.W POSITION,D1  * Setting up the desired row position
000010AC  0641 2C00                144              ADDI #$2C00,D1      * Setting up the desired column position
000010B0  4E4F                     145              TRAP #15            * Position the cursor at [2Cxx] x - any number
000010B2                           146  
000010B2  0641 0200                147              ADDI #$0200,D1          ******  TESTING BETA  ******
000010B6                           148  
000010B6  43F9 000014B6            149              LEA INIT_HEX,A1
000010BC  103C 000E                150              MOVE.B #14,D0       * Moving task 14 into Data Register 0
000010C0  4E4F                     151              TRAP #15            * Display the string at (A1) without CR, LF
000010C2                           152  
000010C2  45F9 0000110E            153  DISPLAY_HEX LEA HEX_BITMASK,A2
000010C8  47F9 0000112E            154              LEA HEX_VALUE,A3
000010CE                           155  
000010CE  E95A                     156              ROL #4,D2           * Shifts to read the next hexadecimal digit
000010D0  6100 0016                157              BSR LOOP_HEX        * Branch towards the loop of hex thingy
000010D4                           158  
000010D4  E95A                     159              ROL #4,D2           * I HATE THIS, SO MUCH REPEATING CODE
000010D6  6100 0010                160              BSR LOOP_HEX        * I TRIED EVERYTHING WITHOUT USING ANOTHER
000010DA  E95A                     161              ROL #4,D2           * DATA REGISTER. THAT IS SUCH A WASTE... GOSH
000010DC  6100 000A                162              BSR LOOP_HEX        * SO I'M GOING TO LEAVE THIS HERE, BECUASE I 
000010E0  E95A                     163              ROL #4,D2           * REALLY DON"T CARE. TOO MUCH TIME WAS WASTED
000010E2  6100 0004                164              BSR LOOP_HEX        * ANNND YES!! NO MORE BAD CODE (IT WORKS DEAL)
000010E6                           165  
000010E6  4E75                     166              RTS                 * Returns from subroutine
000010E8                           167  
000010E8  3602                     168  LOOP_HEX    MOVE.W D2,D3        * Move the current 16-bits into data register 3
000010EA  C652                     169              AND.W (A2),D3       * AND the current bitmask with temp instruction
000010EC  B652                     170              CMP.W (A2),D3       * Compares the current bitmask in (A2) with D3
000010EE  6600 0018                171              BNE NEXT_HEX
000010F2                           172  
000010F2  43D3                     173              LEA (A3),A1
000010F4  103C 000E                174              MOVE.B #14,D0       * Moving task 14 into Data Register 0
000010F8  4E4F                     175              TRAP #15            * Display the string at (A1) without CR, LF
000010FA                           176              
000010FA  45F9 0000110E            177              LEA HEX_BITMASK,A2
00001100  47F9 0000112E            178              LEA HEX_VALUE,A3
00001106  4E75                     179              RTS                 * Returns from subroutine
00001108                           180  
00001108  544A                     181  NEXT_HEX    ADDA.W #WORD,A2     * Shifts to the next binary
0000110A  544B                     182              ADDA.W #WORD,A3     * Shifts to the next hexadecimal char
0000110C  60DA                     183              BRA LOOP_HEX        * Go back to LOOP and test the new bitmask
0000110E                           184  
0000110E= 000F 000E 000D 0...      185  HEX_BITMASK DC.W $F,$E,$D,$C,$B,$A,$9,$8,$7,$6,$5,$4,$3,$2,$1,$0
0000112E= 4600 4500 4400 4...      186  HEX_VALUE   DC.W 'F','E','D','C','B','A','9','8','7','6','5','4','3','2','1','0'
0000114E                           187  
0000114E                           188  
0000114E                           189  ************************ 8-Bit Displacement Subroutine *************************
0000114E                           190  * SubRoutine that displays a branching displacement as a hexadecimal value
0000114E                           191  *
0000114E                           192  
0000114E                           193  DISPLACEMENT:
0000114E                           194  
0000114E                           195  *--- ERROR FILTER: Checks before printing a non existing branch ---*
0000114E  3410                     196              MOVE.W (A0),D2      * Moving the current 16-bits address into D2
00001150  0242 FF00                197              ANDI.W #$FF00,D2
00001154  B452                     198              CMP.W (A2),D2
00001156  6600 0054                199              BNE  DISPLAY_DATA
0000115A                           200  
0000115A                           201  *--- PRINT OP: Prints the pre-loaded OP message to the output ---*
0000115A  103C 000E                202              MOVE.B #14,D0       * Moving task 14 into Data Register 0
0000115E  4E4F                     203              TRAP #15            * Display the string at (A1) without CR, LF
00001160                           204  
00001160                           205  
00001160                           206  *--- 8-bits 16-bits 32-bits ---*
00001160  3410                     207              MOVE.W (A0),D2      * Moving the current 16-bits address into D2
00001162  4A02                     208              TST.B D2
00001164  6700 0026                209              BEQ D_16_BIT
00001168                           210  
00001168  0C02 00FF                211              CMPI.B #$FF,D2          ******  TESTING BETA  ******
0000116C  6700 0006                212              BEQ D_32_BIT            ******  TESTING BETA  ******
00001170                           213  
00001170  6000 0024                214              BRA D_8_BIT
00001174                           215  
00001174                           216  D_32_BIT:                           ******  TESTING BETA  ******
00001174  5448                     217              ADDA.W #WORD,A0     * Shifts to the next set of 16-bits instruction 
00001176  3410                     218              MOVE.W (A0),D2      * Moving the current 16-bits address into D2
00001178  4842                     219              SWAP D2
0000117A  5448                     220              ADDA.W #WORD,A0     * Shifts to the next set of 16-bits instruction
0000117C  3410                     221              MOVE.W (A0),D2      * Moving the current 16-bits address into D2
0000117E                           222  
0000117E  D448                     223              ADD.W A0,D2
00001180  4842                     224              SWAP D2
00001182  6100 FF3E                225              BSR DISPLAY_HEX
00001186  4842                     226              SWAP D2
00001188  6000 001C                227              BRA D_DONE          
0000118C                           228  
0000118C                           229  
0000118C  5448                     230  D_16_BIT    ADDA.W #WORD,A0     * Shifts to the next set of 16-bits instruction
0000118E  3410                     231              MOVE.W (A0),D2      * Moving the current 16-bits address into D2
00001190  D448                     232              ADD.W A0,D2
00001192  6000 0012                233              BRA D_DONE          
00001196                           234  
00001196                           235  
00001196  3410                     236  D_8_BIT     MOVE.W (A0),D2      * Moving the current 16-bits address into D2
00001198  C47C 00FF                237              AND.W #BITMASK8,D2
0000119C  5442                     238              ADDQ #2,D2
0000119E  0082 FFFFFF00            239              ORI.L #$FFFFFF00,D2
000011A4  D488                     240              ADD.L A0,D2
000011A6                           241  
000011A6  6100 FF1A                242  D_DONE      BSR DISPLAY_HEX 
000011AA  4E75                     243              RTS
000011AC                           244  
000011AC                           245  
000011AC                           246  *******************************  DATA Subroutine *******************************
000011AC                           247  *1000    DATA    $WXYZ
000011AC                           248  *
000011AC                           249  DISPLAY_DATA:
000011AC                           250              
000011AC  43F9 000014BB            251              LEA DATA_M,A1
000011B2  103C 000E                252              MOVE.B #14,D0       * Moving task 14 into Data Register 0
000011B6  4E4F                     253              TRAP #15            * Display the string at (A1) without CR, LF
000011B8                           254  
000011B8  43F9 000014B9            255              LEA INIT_MEM,A1
000011BE  103C 000E                256              MOVE.B #14,D0       * Moving task 14 into Data Register 0
000011C2  4E4F                     257              TRAP #15            * Display the string at (A1) without CR, LF
000011C4                           258  
000011C4  3410                     259              MOVE.W (A0),D2
000011C6  6100 FEFA                260              BSR DISPLAY_HEX 
000011CA  4E75                     261              RTS
000011CC                           262  
000011CC                           263  
000011CC                           264  ************************* Effective Address Algorithm **************************
000011CC                           265  *-------------------------------------------------------------------------------
000011CC                           266  * Type 1 mode xxxx xxxx ssoo oorrr
000011CC                           267  * SubRoutine for handling One Operand addressing looking for a mode and register 
000011CC                           268  * value
000011CC                           269  * Written by: David Heidgerken
000011CC                           270  * Description.  16 bit Instruction will be passed to subroutine via D7
000011CC                           271  * and will parse it to find which address mode and location is being used.
000011CC                           272  * D6 used for Register value, D5 is mode D4 is the Size
000011CC                           273  *-------------------------------------------------------------------------------
000011CC  1C3C 0007                274  EA_TYPE1    MOVE.B  #%00000111, D6  ;move primative 3 bit mask into D3 
000011D0  1A3C 0007                275              MOVE.B  #%00000111, D5  ;move primative 3 bitmask into D4
000011D4  E74D                     276              LSL.W   #3,D5           ;shift mask in D5 left 3 times
000011D6  383C 00C0                277              MOVE.W  #%11000000, D4  ;move size mask into D4
000011DA                           278  
000011DA  CC47                     279              AND.W   D7,D6           ;and D7 and D6 store in D6 Register
000011DC  CA47                     280              AND.W   D7,D5           ;and D7 and D5 store in D5 Mode
000011DE  C847                     281              AND.W   D7,D4           ;and D7 and D4 store in D4 Size
000011E0                           282              
000011E0                           283              ; BSR                       ;return to calling instruction
000011E0                           284  
000011E0                           285  *-------------------------------------------------------------------------------
000011E0                           286  * Type 2 xxxx xxxx dddd dddd
000011E0                           287  * SubRoutine for handling One Operand Displacement.
000011E0                           288  * Written by: David Heidgerken
000011E0                           289  * Description.  16 bit Instruction will be passed to subroutine via D7
000011E0                           290  * and will parse the instruciton to determine the offset being used stored in D6
000011E0                           291  *-------------------------------------------------------------------------------
000011E0  1C3C 00FF                292  EA_TYPE2    MOVE.B  #%11111111, D6  ;move 8bitmask into D6
000011E4  CC87                     293              AND.L   D7,D6           ;and D7 with D6(Offset)
000011E6                           294              ; BSR
000011E6                           295  
000011E6                           296  *-------------------------------------------------------------------------------
000011E6                           297  * Type 3 xxxx rrrooo oorrr
000011E6                           298  * SubRoutine for handling two Operand Effective addressing to find 2 3 bit modes
000011E6                           299  * and two 3 bit registers
000011E6                           300  * Written by: David Heidgerken
000011E6                           301  * Description.  16 bit Instruction will be passed to subroutine via D7
000011E6                           302  * and will parse the last 12 bits to determine the addressing mode and 
000011E6                           303  * locations of the data.
000011E6                           304  * source register stored in D3, source mode in D4 Dest mode in D5 dest register
000011E6                           305  * in D6
000011E6                           306  *-------------------------------------------------------------------------------            
000011E6  1C3C 0007                307  EA_TYPE3    MOVE.B  #BITMASK3, D6   ;move primative 3 bit mask into D6
000011EA  1A3C 0007                308              MOVE.B  #BITMASK3, D5   ;move primative 3 bitmask into D5
000011EE  183C 0007                309              MOVE.B  #BITMASK3, D4   ;move primative 3 bit mask into D4
000011F2  163C 0007                310              MOVE.B  #BITMASK3, D3   ;move primative 3 bit mask into D3
000011F6                           311              
000011F6  E74D                     312              LSL.W   #3,D5           ;shift mask left 3 times
000011F8  ED4C                     313              LSL.W   #6,D4           ;shift mask left 6 times
000011FA  ED4B                     314              LSL.W   #6,D3           ;shift mask left 6 times
000011FC  ED4B                     315              LSL.W   #6,D3           ;shift mask left 3 times
000011FE                           316              
000011FE  CC87                     317              AND.L   D7,D6           ;and D7 with D6 DestRegister
00001200  CA87                     318              AND.L   D7,D5           ;and D7 with D5 DestMode
00001202  C887                     319              AND.L   D7,D4           ;and D7 with D4 SrcMode
00001204  C687                     320              AND.L   D7,D3           ;and D7 with D3 SrcRegister
00001206                           321              
00001206                           322              ; BSR
00001206                           323              
00001206                           324  *-------------------------------------------------------------------------------
00001206                           325  * Type 4   - xxxx DDD1 ssoo orrr
00001206                           326  * Sub Routine to find Size and EA(mode and Register) and Data from instruction
00001206                           327  * D3 stores Databits
00001206                           328  * D4 Stores Size
00001206                           329  * D5 stores Mode
00001206                           330  * D6 stores Register
00001206                           331  *-------------------------------------------------------------------------------            
00001206  1C3C 0007                332  EA_TYPE4    MOVE.B  #%00000111, D6  ;move primative 3 bit mask into D3 
0000120A  1A3C 0007                333              MOVE.B  #%00000111, D5  ;move primative 3 bitmask into D4
0000120E  E74D                     334              LSL.W   #3,D5           ;shift mask in D5 left 3 times
00001210  383C 00C0                335              MOVE.W  #%11000000, D4  ;move size mask into D4
00001214  363C 000E                336              MOVE.W  #%00001110, D3  ; move Datamask into D3
00001218  E14B                     337              LSL.W   #8,D3           ; shift datamask 8 places
0000121A                           338              
0000121A  CC47                     339              AND.W   D7,D6           ;and D7 and D6 store in D6 Register
0000121C  CA47                     340              AND.W   D7,D5           ;and D7 and D5 store in D5 Mode
0000121E  C847                     341              AND.W   D7,D4           ;and D7 and D4 store in D4 Size
00001220  C647                     342              AND.W   D7,D3           ;and D7 and D3 store in D3 Data
00001222                           343      
00001222                           344              ; BSR                       ;return to calling instruction
00001222                           345  
00001222                           346  *-------------------------------------------------------------------------------
00001222                           347  * Type 5 mode xxxx xDxx ssoo oorrr
00001222                           348  * SubRoutine for handling One Operand addressing looking for a mode and register 
00001222                           349  * value
00001222                           350  * Written by: David Heidgerken
00001222                           351  * Description.  16 bit Instruction will be passed to subroutine via D7
00001222                           352  * and will parse it to find which address mode and location is being used.
00001222                           353  * D6 used for Register value, D5 is mode D4 is the Size D3 is direction bit
00001222                           354  *-----------------------------------------------------------------------------
00001222  1C3C 0007                355  EA_TYPE5    MOVE.B  #%00000111, D6  ;move primative 3 bit mask into D3 
00001226  1A3C 0007                356              MOVE.B  #%00000111, D5  ;move primative 3 bitmask into D4
0000122A  E74D                     357              LSL.W   #3,D5           ;shift mask in D5 left 3 times
0000122C  383C 00C0                358              MOVE.W  #%11000000, D4  ;move size mask into D4
00001230  363C 0004                359              MOVE.W  #%00000100, D3  ;move data mask into D3
00001234  E14B                     360              LSL.W   #8,D3           ;shift mask 8 bits in D3
00001236                           361  
00001236                           362              
00001236  CC47                     363              AND.W   D7,D6           ;and D7 and D6 store in D6 Register
00001238  CA47                     364              AND.W   D7,D5           ;and D7 and D5 store in D5 Mode
0000123A  C847                     365              AND.W   D7,D4           ;and D7 and D4 store in D4 Size
0000123C  C647                     366              AND.W   D7,D3           ;and D7 and D3 store in D3 Direction
0000123E                           367              ; BSR                       ;return to calling instruction
0000123E                           368  
0000123E                           369  *-------------------------------------------------------------------------------
0000123E                           370  * Type 6 mode xxxx DDDx ssix xrrr   
0000123E                           371  * Subroutine for Shift and rotate funcitons
0000123E                           372  * D3 - stores Data
0000123E                           373  * D4 -stores Size
0000123E                           374  * D5 stores i(imediate or Register)
0000123E                           375  * D6 stores register
0000123E                           376  *-------------------------------------------------------------------------------
0000123E  163C 000E                377  EA_TYPE6    MOVE.B  #%00001110, D3  ;move data maskinto D3
00001242  E14B                     378              LSL.W   #8,D3           ; Shift it left into the upper 8 bytes
00001244  183C 00C0                379              MOVE.B  #%11000000, D4  ;move size masking into D4
00001248  1A3C 0020                380              MOVE.B  #%00100000, D5  ;move i masking into D5
0000124C  1C3C 0007                381              MOVE.B  #%00000111, D6  ;move register mask into D6
00001250                           382              
00001250  C647                     383              AND.W   D7,D3           ;value of Data in D3
00001252  C847                     384              AND.W   D7,D4           ;value of size in D4
00001254  CA47                     385              AND.W   D7,D5           ;value of i in D5
00001256  CC47                     386              AND.W   D7,D6           ;value of register in D6
00001258                           387              ; BSR
00001258                           388  
00001258                           389  
00001258                           390  ******************** OP-CODE: Individual Task Subroutine Set *******************
00001258                           391  
00001258                           392  *- 000 -------------------------------------------
00001258= 52 4F 4C 00              393  ROL_M       DC.B    'ROL',0     * Tested    0xE118
0000125C  43F8 1258                394  ROL_T       LEA ROL_M,A1
00001260  103C 000E                395              MOVE.B #14,D0       * Moving task 14 into Data Register 0
00001264  4E4F                     396              TRAP #15            * Display the string at (A1) without CR, LF
00001266  4E75                     397              RTS
00001268                           398  *- 001 -------------------------------------------
00001268= 4C 53 4C 00              399  LSL_M       DC.B    'LSL',0     * Tested    0xE108
0000126C  43F8 1268                400  LSL_T       LEA LSL_M,A1
00001270  103C 000E                401              MOVE.B #14,D0
00001274  4E4F                     402              TRAP #15
00001276  4E75                     403              RTS
00001278                           404  *- 002 -------------------------------------------
00001278= 41 53 4C 00              405  ASL_M       DC.B    'ASL',0     * Tested    0xE100
0000127C  43F8 1278                406  ASL_T       LEA ASL_M,A1
00001280  103C 000E                407              MOVE.B #14,D0
00001284  4E4F                     408              TRAP #15
00001286  4E75                     409              RTS
00001288                           410  *- 003 -------------------------------------------
00001288= 52 4F 52 00              411  ROR_M       DC.B    'ROR',0     * Tested    0xE018
0000128C  43F8 1288                412  ROR_T       LEA ROR_M,A1
00001290  103C 000E                413              MOVE.B #14,D0
00001294  4E4F                     414              TRAP #15
00001296  4E75                     415              RTS
00001298                           416  *- 004 -------------------------------------------
00001298= 4C 53 52 00              417  LSR_M       DC.B    'LSR',0     * Tested    0xE008
0000129C  43F8 1298                418  LSR_T       LEA LSR_M,A1
000012A0  103C 000E                419              MOVE.B #14,D0
000012A4  4E4F                     420              TRAP #15
000012A6  4E75                     421              RTS
000012A8                           422  *- 005 -------------------------------------------
000012A8= 41 53 52 00              423  ASR_M       DC.B    'ASR',0     * Tested    0xE000
000012AC  43F8 12A8                424  ASR_T       LEA ASR_M,A1
000012B0  103C 000E                425              MOVE.B #14,D0
000012B4  4E4F                     426              TRAP #15
000012B6  4E75                     427              RTS
000012B8                           428  *- 006 -------------------------------------------
000012B8= 41 44 44 41 00           429  ANDA_M      DC.B    'ADDA',0    * Tested    0xD0C0
000012BE  43F8 12B8                430  ANDA_T      LEA ANDA_M,A1
000012C2  103C 000E                431              MOVE.B #14,D0
000012C6  4E4F                     432              TRAP #15
000012C8  4E75                     433              RTS
000012CA                           434  *- 007 -------------------------------------------
000012CA= 41 44 44 00              435  ADD_M       DC.B    'ADD',0     * Tested    0xD000
000012CE  43F8 12CA                436  ADD_T       LEA ADD_M,A1
000012D2  103C 000E                437              MOVE.B #14,D0
000012D6  4E4F                     438              TRAP #15
000012D8  4E75                     439              RTS
000012DA                           440  *- 008 -------------------------------------------
000012DA= 4D 55 4C 53 00           441  MULS_M      DC.B    'MULS',0    * Issue     0xC1C0
000012E0  43F8 12DA                442  MULS_T      LEA MULS_M,A1
000012E4  103C 000E                443              MOVE.B #14,D0
000012E8  4E4F                     444              TRAP #15
000012EA  4E75                     445              RTS
000012EC                           446  *- 009 -------------------------------------------
000012EC= 43 4D 50 00              447  CMP_M       DC.B    'CMP',0                 0xB000
000012F0  43F8 12EC                448  CMP_T       LEA CMP_M,A1
000012F4  103C 000E                449              MOVE.B #14,D0
000012F8  4E4F                     450              TRAP #15
000012FA  4E75                     451              RTS
000012FC                           452  *- 010 -------------------------------------------
000012FC= 53 55 42 00              453  SUB_M       DC.B    'SUB',0                 0x9000
00001300  43F8 12FC                454  SUB_T       LEA SUB_M,A1
00001304  103C 000E                455              MOVE.B #14,D0
00001308  4E4F                     456              TRAP #15
0000130A  4E75                     457              RTS
0000130C                           458  *- 011 -------------------------------------------
0000130C= 44 49 56 53 00           459  DIVS_M      DC.B    'DIVS',0    * Issue     0x81C0
00001312  43F8 130C                460  DIVS_T      LEA DIVS_M,A1
00001316  103C 000E                461              MOVE.B #14,D0
0000131A  4E4F                     462              TRAP #15
0000131C  4E75                     463              RTS
0000131E                           464  *- 012 -------------------------------------------
0000131E= 4F 52 00                 465  OR_M        DC.B    'OR',0                  0x8000
00001322  43F8 131E                466  OR_T        LEA OR_M,A1
00001326  103C 000E                467              MOVE.B #14,D0
0000132A  4E4F                     468              TRAP #15
0000132C  4E75                     469              RTS
0000132E                           470  *- 013 -------------------------------------------
0000132E= 42 4C 54 20 00           471  BLT_M       DC.B    'BLT ',0                0x6D00
00001334  43F8 132E                472  BLT_T       LEA BLT_M,A1
00001338  6100 FE14                473              BSR DISPLACEMENT
0000133C  4E75                     474              RTS
0000133E                           475  *- 014 -------------------------------------------
0000133E= 42 47 45 20 00           476  BGE_M       DC.B    'BGE ',0                0x6C00
00001344  43F8 133E                477  BGE_T       LEA BGE_M,A1
00001348  6100 FE04                478              BSR DISPLACEMENT
0000134C  4E75                     479              RTS
0000134E                           480  *- 015 -------------------------------------------
0000134E= 42 56 43 20 00           481  BVC_M       DC.B    'BVC ',0                0x6800
00001354  43F8 134E                482  BVC_T       LEA BVC_M,A1
00001358  6100 FDF4                483              BSR DISPLACEMENT
0000135C  4E75                     484              RTS
0000135E                           485  *- 016 -------------------------------------------
0000135E= 42 43 53 20 00           486  BCS_M       DC.B    'BCS ',0                0x6500
00001364  43F8 135E                487  BCS_T       LEA BCS_M,A1
00001368  6100 FDE4                488              BSR DISPLACEMENT
0000136C  4E75                     489              RTS
0000136E                           490  *- 017 -------------------------------------------
0000136E= 42 52 41 20 00           491  BRA_M       DC.B    'BRA ',0                0x6000
00001374  43F8 136E                492  BRA_T       LEA BRA_M,A1
00001378  6100 FDD4                493              BSR DISPLACEMENT
0000137C  4E75                     494              RTS
0000137E                           495  *- 018 -------------------------------------------
0000137E= 53 55 42 51 00           496  SUBQ_M      DC.B    'SUBQ',0                0x5100
00001384  43F8 137E                497  SUBQ_T      LEA SUBQ_M,A1
00001388  103C 000E                498              MOVE.B #14,D0
0000138C  4E4F                     499              TRAP #15
0000138E  4E75                     500              RTS
00001390                           501  *- 019 -------------------------------------------
00001390= 4A 53 52 00              502  JSR_M       DC.B    'JSR',0     * Tested    0x4E80
00001394  43F8 1390                503  JSR_T       LEA JSR_M,A1
00001398  103C 000E                504              MOVE.B #14,D0
0000139C  4E4F                     505              TRAP #15
0000139E  4E75                     506              RTS
000013A0                           507  *- 020 -------------------------------------------
000013A0= 52 54 53 00              508  RTS_M       DC.B    'RTS',0     * Tested    0x4E75
000013A4  43F8 13A0                509  RTS_T       LEA RTS_M,A1
000013A8  103C 000E                510              MOVE.B #14,D0
000013AC  4E4F                     511              TRAP #15
000013AE  4E75                     512              RTS
000013B0                           513  *- 021 -------------------------------------------
000013B0= 4E 4F 50 00              514  NOP_M       DC.B    'NOP',0     * Tested    0x4E71
000013B4  43F8 13B0                515  NOP_T       LEA NOP_M,A1
000013B8  103C 000E                516              MOVE.B #14,D0
000013BC  4E4F                     517              TRAP #15
000013BE  4E75                     518              RTS
000013C0                           519  *- 022 -------------------------------------------
000013C0= 4D 4F 56 45 4D 00        520  MOVEM_M     DC.B    'MOVEM',0               0x4880
000013C6  43F8 13C0                521  MOVEM_T     LEA MOVEM_M,A1
000013CA  103C 000E                522              MOVE.B #14,D0
000013CE  4E4F                     523              TRAP #15
000013D0  4E75                     524              RTS
000013D2                           525  *- 023 -------------------------------------------
000013D2= 4E 45 47 00              526  NEG_M       DC.B    'NEG',0     * Tested    0x4400
000013D6  43F8 13D2                527  NEG_T       LEA NEG_M,A1
000013DA  103C 000E                528              MOVE.B #14,D0
000013DE  4E4F                     529              TRAP #15
000013E0  4E75                     530              RTS
000013E2                           531  *- 024 -------------------------------------------
000013E2= 4C 45 41 00              532  LEA_M       DC.B    'LEA',0                 0x41C0
000013E6  43F8 13E2                533  LEA_T       LEA LEA_M,A1
000013EA  103C 000E                534              MOVE.B #14,D0
000013EE  4E4F                     535              TRAP #15
000013F0  4E75                     536              RTS
000013F2                           537  *- 025 -------------------------------------------
000013F2= 4D 4F 56 45 41 2E ...    538  MOAW_M      DC.B    'MOVEA.W',0             0x3040
000013FA  43F8 13F2                539  MOAW_T      LEA MOAW_M,A1
000013FE  103C 000E                540              MOVE.B #14,D0
00001402  4E4F                     541              TRAP #15
00001404  4E75                     542              RTS
00001406                           543  *- 026 -------------------------------------------
00001406= 4D 4F 56 45 2E 57 00     544  MOW_M       DC.B    'MOVE.W',0              0x3000
0000140E  43F8 1406                545  MOW_T       LEA MOW_M,A1
00001412  103C 000E                546              MOVE.B #14,D0
00001416  4E4F                     547              TRAP #15
00001418  4E75                     548              RTS
0000141A                           549  *- 027 -------------------------------------------
0000141A= 4D 4F 56 45 41 2E ...    550  MOAL_M      DC.B    'MOVEA.L',0             0x2040
00001422  43F8 141A                551  MOAL_T      LEA MOAL_M,A1
00001426  103C 000E                552              MOVE.B #14,D0
0000142A  4E4F                     553              TRAP #15
0000142C  4E75                     554              RTS
0000142E                           555  *- 028 -------------------------------------------
0000142E= 4D 4F 56 45 2E 4C 00     556  MOL_M       DC.B    'MOVE.L',0              0x2000
00001436  43F8 142E                557  MOL_T       LEA MOL_M,A1
0000143A  103C 000E                558              MOVE.B #14,D0
0000143E  4E4F                     559              TRAP #15
00001440  4E75                     560              RTS
00001442                           561  *- 029 -------------------------------------------
00001442= 4D 4F 56 45 2E 42 00     562  MOB_M       DC.B    'MOVE.B',0              0x1000
0000144A  43F8 1442                563  MOB_T       LEA MOB_M,A1
0000144E  103C 000E                564              MOVE.B #14,D0
00001452  4E4F                     565              TRAP #15
00001454  4E75                     566              RTS
00001456                           567  *- 030 -------------------------------------------
00001456= 43 4D 50 49 00           568  CMPI_M      DC.B    'CMPI',0                0x0C00
0000145C  43F8 1456                569  CMPI_T      LEA CMPI_M,A1
00001460  103C 000E                570              MOVE.B #14,D0
00001464  4E4F                     571              TRAP #15
00001466  4E75                     572              RTS
00001468                           573  *- 031 -------------------------------------------
00001468= 42 43 4C 52 00           574  BCLR_M      DC.B    'BCLR',0                0x01C0
0000146E  43F8 1468                575  BCLR_T      LEA BCLR_M,A1
00001472  103C 000E                576              MOVE.B #14,D0
00001476  4E4F                     577              TRAP #15
00001478  4E75                     578              RTS
0000147A                           579  *- 032 -------------------------------------------
0000147A= 4F 52 49 00              580  ORI_M       DC.B    'ORI',0                 0x0000
0000147E  43F8 147A                581  ORI_T       LEA ORI_M,A1
00001482  103C 000E                582              MOVE.B #14,D0
00001486  4E4F                     583              TRAP #15
00001488  4E75                     584              RTS
0000148A                           585  
0000148A                           586  *-------------------------------- Data Section ---------------------------------
0000148A                           587  
0000148A= 41 44 44 52 45 53 ...    588  HEADER      DC.B    'ADDRESS   OP-CODE   OPERAND            INSTRUCTION', 0 
000014B6= 30 78 00                 589  INIT_HEX    DC.B    '0x',0
000014B9= 24 00                    590  INIT_MEM    DC.B    '$',0
000014BB= 44 41 54 41 20 00        591  DATA_M      DC.B    'DATA ',0
000014C1= 0D 0A 00                 592  NEWLINE     DC.B  CR,LF,0
000014C4                           593  
000014C4= 0001                     594  POSITION    DC.W  $0001
000014C6                           595  SAVE_STATE  DS.L  1    
000014CA                           596  
000014CA                           597  ; Byte_M        DC.B  '.B ',0
000014CA                           598  ; Word_M        DC.B  '.W ',0
000014CA                           599  ; Long_M        DC.B  '.L ',0
000014CA                           600  
000014CA                           601  *---------------------------- Task Operation List ------------------------------
000014CA                           602  * The values for this constant are set to move in parallel with those of
000014CA                           603  * the constant BITMASK via steps at label NEXT_MASK.
000014CA                           604  
000014CA= 125C 126C 127C 1...      605  TASK_OP     DC.W ROL_T,LSL_T,ASL_T,ROR_T,LSR_T,ASR_T,ANDA_T,ADD_T,MULS_T,CMP_T
000014DE= 1300 1312 1322 1...      606              DC.W SUB_T,DIVS_T,OR_T,BLT_T,BGE_T,BVC_T,BCS_T,BRA_T,SUBQ_T,JSR_T
000014F2= 13A4 13B4 13C6 1...      607              DC.W RTS_T,NOP_T,MOVEM_T,NEG_T,LEA_T,MOAW_T,MOW_T,MOAL_T,MOL_T,MOB_T
00001506= 145C 146E 147E 0000      608              DC.W CMPI_T,BCLR_T,ORI_T,0
0000150E                           609  
0000150E                           610  *--------------------------- Bitmask Translation List --------------------------
0000150E= E118 E108 E100 E...      611  BITMASK     DC.W $E118,$E108,$E100,$E018,$E008,$E000,$D0C0,$D000,$C1C0,$B000
00001522= 9000 81C0 8000 6...      612              DC.W $9000,$81C0,$8000,$6D00,$6C00,$6800,$6500,$6000,$5100,$4E80
00001536= 4E75 4E71 4880 4...      613              DC.W $4E75,$4E71,$4880,$4400,$41C0,$3040,$3000,$2040,$2000,$1000
0000154A= 0C00 01C0 0000 0000      614              DC.W $0C00,$01C0,$0000,0
00001552                           615  
00001552                           616  *--------------------------------- Source Code ---------------------------------
00001552                           617  ; SOURCE_C    DC.W  $4E75,$D6C7,$4EB8,$4487,$D5C2,$4E71,$4EB9,$D280,$4E71,$4E75
00001552                           618  ;                  RTS   ADDA  JSR   NEG   ADDA  NOP   JSR   ADD   NOP   RTS
00001552                           619              ; DC.W  $66FC,$EE45,$E6AA,$E439,$2646,$EF45,$62FC,$E539,$303C
00001552                           620  ;                  DATA  ASR   LSR   ROR   MOVEA ASL   DATA  ROL   MOVE.W
00001552                           621              ; DC.W  $E539,$6078,$EF45,$68CD,$BBBB,$E6AA,$EE45,$85C3,$0001,0
00001552                           622  ;                  ROL   BRA   ASL   BVC   ERROR LSR   ASR   DIVS  TEST
00001552                           623  
00001552                           624  **** Displacement TESTING - REMOVE WHEN DONE ****
00001552                           625  ; SOURCE_C  DC.W    $4E71,$3204,$B045,$66F8,$6DFA,$4E71,$3A0B,$61F4,$60EE,$65FA,0
00001552                           626  ; SOURCE_C  DC.W    $2803,$6FFC,$6EFC,$6DFC,$6CFC,$6BFC,$6AFC,$69FC,$68FC,$67FC
00001552                           627  ;           DC.W    $66FC,$65FC,$64FC,$63FC,$62FC,$60FC,0
00001552= 3202 6D00 000C 3...      628  SOURCE_C    DC.W    $3202,$6D00,$000C,$3C0B,$6000,$0004,$3201,$4E71,$5241
00001564= 6CFF 0002 6A12 6...      629              DC.W    $6CFF,$0002,$6A12,$66FC,$65FC,$64FC,$63FC,$62FC,$60FC,0
00001578                           630  
00001578                           631  
00001578                           632      END     START               * last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD_M               12CA
ADD_T               12CE
ANDA_M              12B8
ANDA_T              12BE
ASL_M               1278
ASL_T               127C
ASR_M               12A8
ASR_T               12AC
BCLR_M              1468
BCLR_T              146E
BCS_M               135E
BCS_T               1364
BGE_M               133E
BGE_T               1344
BITMASK             150E
BITMASK3            7
BITMASK4            F
BITMASK8            FF
BLT_M               132E
BLT_T               1334
BRA_M               136E
BRA_T               1374
BVC_M               134E
BVC_T               1354
CHECK_VALUE         1064
CMPI_M              1456
CMPI_T              145C
CMP_M               12EC
CMP_T               12F0
CR                  D
DATA_M              14BB
DISPLACEMENT        114E
DISPLAY_DATA        11AC
DISPLAY_HEX         10C2
DISPLAY_INT         10A2
DIVS_M              130C
DIVS_T              1312
D_16_BIT            118C
D_32_BIT            1174
D_8_BIT             1196
D_DONE              11A6
EA_TYPE1            11CC
EA_TYPE2            11E0
EA_TYPE3            11E6
EA_TYPE4            1206
EA_TYPE5            1222
EA_TYPE6            123E
EXIT                2700
HEADER              148A
HEX_BITMASK         110E
HEX_VALUE           112E
INIT_HEX            14B6
INIT_MEM            14B9
INIT_OP             1022
JSR_M               1390
JSR_T               1394
LEA_M               13E2
LEA_T               13E6
LF                  A
LOOP_HEX            10E8
LOOP_OP             1034
LSL_M               1268
LSL_T               126C
LSR_M               1298
LSR_T               129C
MOAL_M              141A
MOAL_T              1422
MOAW_M              13F2
MOAW_T              13FA
MOB_M               1442
MOB_T               144A
MOL_M               142E
MOL_T               1436
MOVEM_M             13C0
MOVEM_T             13C6
MOW_M               1406
MOW_T               140E
MULS_M              12DA
MULS_T              12E0
NEG_M               13D2
NEG_T               13D6
NEWLINE             14C1
NEXT_HEX            1108
NEXT_MASK           108C
NOP_M               13B0
NOP_T               13B4
NW_A                107C
ORI_M               147A
ORI_T               147E
OR_M                131E
OR_T                1322
POSITION            14C4
ROL_M               1258
ROL_T               125C
ROR_M               1288
ROR_T               128C
RTS_M               13A0
RTS_T               13A4
SAVE_STATE          14C6
SHIFT_OP            1094
SOURCE_C            1552
START               1000
SUBQ_M              137E
SUBQ_T              1384
SUB_M               12FC
SUB_T               1300
TASK_OP             14CA
WORD                2
