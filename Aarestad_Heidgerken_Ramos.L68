00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 11/29/2014 6:25:17 PM

00000000                             1  *-------------------------------------------------------------------------------
00000000                             2  * Title      : Dissassembler
00000000                             3  * Written by : Ryan Aarestad, David Heidgerken, Matthew Ramos
00000000                             4  * Date       : Thursday November 6, 2014
00000000                             5  * Description: Assembly language program that can read a string of binary and
00000000                             6  *              decode it into Assembly language instructions.  
00000000                             7  *-------------------------------------------------------------------------------
00000000                             8  
00000000                             9              OPT   CRE
00000000                            10  
00000000  =0000000D                 11  CR          EQU   $000D
00000000  =0000000A                 12  LF          EQU   $000A
00000000  =00001000                 13  START       EQU   $1000         * Program starting address
00000000  =00002700                 14  EXIT        EQU   $2700         * Simulator stoping code
00000000  =00000002                 15  WORD        EQU   $0002         * Advance address by a word
00000000                            16  
00000000  =000000FF                 17  BITMASK8    EQU   $00FF
00000000  =0000000F                 18  BITMASK4    EQU   $000F
00000000  =00000007                 19  BITMASK3    EQU   $0007
00000000                            20  
00000000                            21  *----------------------- Address Register / Data Register ----------------------
00000000                            22  * A0: Designated for Source Code
00000000                            23  * A1: Designated for Displaying string to the output
00000000                            24  * A2: Designated for OP Bitmask list / Hexadecimal Bitmask list
00000000                            25  * A3: Designated for Task Operation list / Hexadecimal value list
00000000                            26  * A4: 
00000000                            27  * A5: 
00000000                            28  * A6: 
00000000                            29  
00000000                            30  
00000000                            31  * D0: Designated for task code values while using TRAP #15
00000000                            32  * D1: Main 16-bits copy of the instructions (PRINTING PURPOSES) / Task 11
00000000                            33  * D2: Hexadecimal Temp convert
00000000                            34  * D3: Temporary 16-bits for bitmask comparison
00000000                            35  * D4: 
00000000                            36  * D5: 
00000000                            37  * D6: 
00000000                            38  * D7: 
00000000                            39  
00000000                            40  *------------------- Main Program / Initial Starting Point ---------------------
00000000                            41  
00001000                            42              ORG    START        * Program begins here
00001000                            43  
00001000  43F9 0000131C             44              LEA HEADER,A1       * Load Dissassembler header message into A1 
00001006  103C 000D                 45              MOVE.B #13,D0       * Move task 13 into Data Register 0
0000100A  4E4F                      46              TRAP #15            * Display the string at (A1) with CR, LF.
0000100C                            47  
0000100C  41F9 000013DA             48              LEA SOURCE_C,A0     * Load the source code into address register 0
00001012                            49  
00001012  6100 000E                 50              BSR INIT_OP         * Hunts down each Operation code like a mad man
00001016                            51  
00001016  33FC 0A01 0000134E        52              MOVE.W #$0A01,POSITION  *** TEST - RESET POSITION ***
0000101E  4E72 2700                 53              STOP #EXIT          * Halt Simulator
00001022                            54  
00001022                            55  
00001022                            56  ********************* OP-CODE Looping Algorithm Subroutine *********************
00001022                            57  
00001022                            58  INIT_OP     * Resets the list of bitmasks & english to the begining
00001022                            59  
00001022  3408                      60              MOVE.W A0,D2        * Moving the current 16-bits address into D2
00001024  6100 006A                 61              BSR DISPLAY_HEX 
00001028                            62  
00001028  45F9 00001396             63              LEA BITMASK,A2      * Load the bitmask list into address register 2
0000102E  47F9 00001352             64              LEA TASK_OP,A3      * Load the OP task list into address register 3
00001034                            65  
00001034                            66  
00001034  3610                      67  LOOP_OP     MOVE.W (A0),D3      * Move the current 16-bits into data register 3
00001036                            68  
00001036  C652                      69              AND.W (A2),D3       * AND the current bitmask with temp instruction
00001038                            70  
00001038  B652                      71              CMP.W (A2),D3       * Compares the current bitmask in (A2) with D3
0000103A  6600 0028                 72              BNE NEXT_MASK       * No Match found branch to the NEXT_MASK
0000103E                            73              
0000103E  103C 000B                 74              MOVE.B #11,D0       * Moving task 11 into Data Register 0
00001042  3239 0000134E             75              MOVE.W POSITION,D1  * Sets up the desired position
00001048  4E4F                      76              TRAP #15            * Position the cursor at [0Axx] x - any number
0000104A                            77  
0000104A  3653                      78              MOVEA.W (A3),A3     * Moves the task address into the same (An)
0000104C                            79  
0000104C  4E93                      80              JSR (A3)            * Jumps to the current task subroutine from A3
0000104E                            81              ; JMP (A3)          * Jumps to the current task subroutine from A3
0000104E                            82  
0000104E  3410                      83  RETURN      MOVE.W (A0),D2      * Reloads the orignal 16-bits as a temp again
00001050  6100 0028                 84              BSR DISPLAY_INT     * Display the current 16-bits in Hexadecimal
00001054                            85  
00001054  43F9 0000134B             86              LEA NEWLINE,A1      * Loading NEWLINE into (A1) for next instruction
0000105A  103C 000E                 87              MOVE.B #14,D0       * Moving task 14 into Data Register 0
0000105E  4E4F                      88              TRAP #15            * Display the string at (A1) without CR, LF
00001060                            89  
00001060  6000 000A                 90              BRA SHIFT           * Shifts to the next 16-bits of the source code
00001064                            91  
00001064                            92  *---------------------- Advancing Bitmask & OP Task list -----------------------
00001064                            93  
00001064  544A                      94  NEXT_MASK   ADDA.W #WORD,A2     * Shifts to the next bitmask
00001066  544B                      95              ADDA.W #WORD,A3     * Shifts to the next OP Name
00001068                            96  
00001068  4A53                      97              TST.W (A3)          * Did I reach the end of the English list?
0000106A  66C8                      98              BNE LOOP_OP         * Go back to LOOP_OP and test the new bitmask
0000106C                            99  
0000106C  5448                     100  SHIFT       ADDA.W #WORD,A0     * Shifts to the next set of 16-bits instruction
0000106E                           101  
0000106E  5279 0000134E            102              ADDQ.W #1,POSITION  *** VERY IMPORTANT: Shifts the position by 1 ***
00001074                           103  
00001074  4A50                     104              TST.W (A0)          * See if you reached the end of the instructions
00001076  66AA                     105              BNE INIT_OP         * (!=) Resets the bitmask & OP task lists
00001078  4E75                     106              RTS                 * Returns from subroutine
0000107A                           107  
0000107A                           108  
0000107A                           109  ************************ Display Hexadecimal Subroutine ************************
0000107A                           110  * Displays an output of a single 16-bit instruction as a hexadecimal value
0000107A                           111  * Take that prof. Nash (mostly Kim), I didn't want to use task #15 anyway
0000107A                           112  
0000107A                           113  *** IMPORTANT *** Load the value that you wish to display in hexadecimal in D2
0000107A                           114      
0000107A                           115  
0000107A  103C 000B                116  DISPLAY_INT MOVE.B #11,D0       * Moving task 11 into Data Register 0
0000107E  0641 2200                117              ADDI #$2200,D1
00001082  4E4F                     118              TRAP #15            * Position the cursor at [2Cxx] x - any number
00001084                           119  
00001084  43F9 00001348            120              LEA INIT_HEX,A1
0000108A  103C 000E                121              MOVE.B #14,D0
0000108E  4E4F                     122              TRAP #15
00001090                           123  
00001090  45F9 000010DC            124  DISPLAY_HEX LEA HEX_BITMASK,A2
00001096  47F9 000010FC            125              LEA HEX_VALUE,A3
0000109C                           126  
0000109C  E95A                     127              ROL #4,D2           * Shifts to read the next hexadecimal digit
0000109E  6100 0016                128              BSR LOOP_HEX        * Branch towards the loop of hex thingy
000010A2                           129  
000010A2  E95A                     130              ROL #4,D2           * I HATE THIS, SO MUCH REPEATING CODE
000010A4  6100 0010                131              BSR LOOP_HEX        * I TRIED EVERYTHING WITHOUT USING ANOTHER
000010A8  E95A                     132              ROL #4,D2           * DATA REGISTER. THAT IS SUCH A WASTE... GOSH
000010AA  6100 000A                133              BSR LOOP_HEX        * SO I'M GOING TO LEAVE THIS HERE, BECUASE I 
000010AE  E95A                     134              ROL #4,D2           * REALLY DON"T CARE. TOO MUCH TIME WAS WASTED
000010B0  6100 0004                135              BSR LOOP_HEX        * ANNND YES!! NO MORE BAD CODE (IT WORKS DEAL)
000010B4                           136  
000010B4  4E75                     137              RTS                 * Returns from subroutine
000010B6                           138  
000010B6  3602                     139  LOOP_HEX    MOVE.W D2,D3        * Move the current 16-bits into data register 3
000010B8  C652                     140              AND.W (A2),D3       * AND the current bitmask with temp instruction
000010BA  B652                     141              CMP.W (A2),D3       * Compares the current bitmask in (A2) with D3
000010BC  6600 0018                142              BNE NEXT_HEX
000010C0                           143  
000010C0  43D3                     144              LEA (A3),A1
000010C2  103C 000E                145              MOVE.B #14,D0
000010C6  4E4F                     146              TRAP #15
000010C8                           147              
000010C8  45F9 000010DC            148              LEA HEX_BITMASK,A2
000010CE  47F9 000010FC            149              LEA HEX_VALUE,A3
000010D4  4E75                     150              RTS                 * Returns from subroutine
000010D6                           151  
000010D6  544A                     152  NEXT_HEX    ADDA.W #WORD,A2     * Shifts to the next binary
000010D8  544B                     153              ADDA.W #WORD,A3     * Shifts to the next hexadecimal char
000010DA  60DA                     154              BRA LOOP_HEX        * Go back to LOOP and test the new bitmask
000010DC                           155  
000010DC= 000F 000E 000D 0...      156  HEX_BITMASK DC.W $F,$E,$D,$C,$B,$A,$9,$8,$7,$6,$5,$4,$3,$2,$1,$0
000010FC= 4600 4500 4400 4...      157  HEX_VALUE   DC.W 'F','E','D','C','B','A','9','8','7','6','5','4','3','2','1','0'
0000111C                           158  
0000111C                           159  
0000111C                           160  ************************* Effective Address Algorithm **************************
0000111C                           161  *-------------------------------------------------------------------------------
0000111C                           162  * SubRoutine for handling One Operand Effective addressing.
0000111C                           163  * Written by: David Heidgerken
0000111C                           164  * Description.  16 bit Instruction will be passed to subroutine via D7
0000111C                           165  * and will parse it to find which address mode and location is being used.
0000111C                           166  *D6 used for Register value, D5 is EA Mode
0000111C                           167  *-----------------------------------------------------------------------------
0000111C                           168  ; OneOpEA       MOVE.B  #BITMASK3, D6   ;move primative 3 bit mask into D3 
0000111C                           169  ;           MOVE.B  #BITMASK3, D5   ;move primative 3 bitmask into D4
0000111C                           170  ;           LSL.W   3,D5            ;shift mask left 3 times
0000111C                           171              
0000111C                           172  ;           AND.W   D7,D6           ;and D7 and D3 store in D3 Register
0000111C                           173  ;           AND.W   D7,D5           ;and D7 and D4 store in D4 Mode
0000111C                           174              
0000111C                           175              ; BSR                       ;return to calling instruction
0000111C                           176              
0000111C                           177  
0000111C                           178  *-------------------------------------------------------------------------------
0000111C                           179  * SubRoutine for handling One Operand Displacement.
0000111C                           180  * Written by: David Heidgerken
0000111C                           181  * Description.  16 bit Instruction will be passed to subroutine via D7
0000111C                           182  * and will parse the instruciton to determine the offset being usedstored in D3
0000111C                           183  *-------------------------------------------------------------------------------
0000111C                           184  ; OneOpDis  MOVE.B  #BITMASK8, D6   ;move 8bitmask into D6
0000111C                           185  ;           AND.L   D7,D6           ;and D7 with D6(Offset)
0000111C                           186              
0000111C                           187  
0000111C                           188  *-------------------------------------------------------------------------------
0000111C                           189  * SubRoutine for handling One Operand Effective addressing.
0000111C                           190  * Written by: David Heidgerken
0000111C                           191  * Description.  16 bit Instruction will be passed to subroutine via D7
0000111C                           192  * and will parse the last 12 bits to determine the addressing mode and 
0000111C                           193  * locations of the data.
0000111C                           194  *-------------------------------------------------------------------------------
0000111C                           195  ; TwoOp     MOVE.B  #BITMASK3, D6   ;move primative 3 bit mask into D6
0000111C                           196  ;           MOVE.B  #BITMASK3, D5   ;move primative 3 bitmask into D5
0000111C                           197  ;           MOVE.B  #BITMASK3, D4   ;move primative 3 bit mask into D4
0000111C                           198  ;           MOVE.B  #BITMASK3, D3   ;move primative 3 bit mask into D3
0000111C                           199              
0000111C                           200  ;           LSL.W   3,D5            ;shift mask left 3 times
0000111C                           201  ;           LSL.W   6,D4            ;shift mask left 3 times
0000111C                           202  ;           LSL.W   6,D3            ;shift mask left 3 times
0000111C                           203  ;           LSL.W   6,D3            ;shift mask left 3 times
0000111C                           204              
0000111C                           205  ;           AND.L   D7,D6           ;and D7 with D6 DestRegister
0000111C                           206  ;           AND.L   D7,D6           ;and D7 with D5 DestMode
0000111C                           207  ;           AND.L   D7,D6           ;and D7 with D4 SrcMode
0000111C                           208  ;           AND.L   D7,D6           ;and D7 with D3 SrcRegister
0000111C                           209              
0000111C                           210              ; BSR
0000111C                           211  
0000111C                           212  
0000111C                           213  
0000111C                           214  
0000111C                           215  ******************** OP-CODE: Individual Task Subroutine Set *******************
0000111C                           216  
0000111C                           217  *-------------------------------------------------
0000111C= 52 4F 4C 00              218  ROL_M       DC.B    'ROL',0     * Tested    0xE118
00001120  43F8 111C                219  ROL_T       LEA ROL_M,A1
00001124  700E                     220              MOVE.L #14,D0       * Moving task 14 into Data Register 0
00001126  4E4F                     221              TRAP #15            * Display the string at (A1) without CR, LF
00001128  4E75                     222              RTS
0000112A                           223              ; BRA RETURN
0000112A                           224  *-------------------------------------------------
0000112A= 4C 53 4C 00              225  LSL_M       DC.B    'LSL',0     * Tested    0xE108
0000112E  43F8 112A                226  LSL_T       LEA LSL_M,A1
00001132  700E                     227              MOVE.L #14,D0
00001134  4E4F                     228              TRAP #15
00001136  4E75                     229              RTS
00001138                           230              ; BRA RETURN
00001138                           231  *-------------------------------------------------
00001138= 41 53 4C 00              232  ASL_M       DC.B    'ASL',0     * Tested    0xE100
0000113C  43F8 1138                233  ASL_T       LEA ASL_M,A1
00001140  700E                     234              MOVE.L #14,D0
00001142  4E4F                     235              TRAP #15
00001144  4E75                     236              RTS
00001146                           237              ; BRA RETURN            
00001146                           238  *-------------------------------------------------
00001146= 52 4F 52 00              239  ROR_M       DC.B    'ROR',0     * Tested    0xE018
0000114A  43F8 1146                240  ROR_T       LEA ROR_M,A1
0000114E  700E                     241              MOVE.L #14,D0
00001150  4E4F                     242              TRAP #15
00001152  4E75                     243              RTS
00001154                           244              ; BRA RETURN
00001154                           245  *-------------------------------------------------
00001154= 4C 53 52 00              246  LSR_M       DC.B    'LSR',0     * Tested    0xE008
00001158  43F8 1154                247  LSR_T       LEA LSR_M,A1
0000115C  700E                     248              MOVE.L #14,D0
0000115E  4E4F                     249              TRAP #15
00001160  4E75                     250              RTS
00001162                           251              ; BRA RETURN
00001162                           252  *-------------------------------------------------
00001162= 41 53 52 00              253  ASR_M       DC.B    'ASR',0     * Tested    0xE000
00001166  43F8 1162                254  ASR_T       LEA ASR_M,A1
0000116A  700E                     255              MOVE.L #14,D0
0000116C  4E4F                     256              TRAP #15
0000116E  4E75                     257              RTS
00001170                           258              ; BRA RETURN
00001170                           259  *-------------------------------------------------
00001170= 41 44 44 41 00           260  ANDA_M      DC.B    'ADDA',0    * Tested    0xD0C0
00001176  43F8 1170                261  ANDA_T      LEA ANDA_M,A1
0000117A  700E                     262              MOVE.L #14,D0
0000117C  4E4F                     263              TRAP #15
0000117E  4E75                     264              RTS
00001180                           265              ; BRA RETURN
00001180                           266  *-------------------------------------------------
00001180= 41 44 44 00              267  ADD_M       DC.B    'ADD',0     * Tested    0xD000
00001184  43F8 1180                268  ADD_T       LEA ADD_M,A1
00001188  700E                     269              MOVE.L #14,D0
0000118A  4E4F                     270              TRAP #15
0000118C  4E75                     271              RTS
0000118E                           272              ; BRA RETURN
0000118E                           273  *-------------------------------------------------
0000118E= 4D 55 4C 53 00           274  MULS_M      DC.B    'MULS',0    * Issue     0xC1C0
00001194  43F8 118E                275  MULS_T      LEA MULS_M,A1
00001198  700E                     276              MOVE.L #14,D0
0000119A  4E4F                     277              TRAP #15
0000119C  4E75                     278              RTS
0000119E                           279              ; BRA RETURN
0000119E                           280  *-------------------------------------------------
0000119E= 43 4D 50 00              281  CMP_M       DC.B    'CMP',0                 0xB000
000011A2  43F8 119E                282  CMP_T       LEA CMP_M,A1
000011A6  700E                     283              MOVE.L #14,D0
000011A8  4E4F                     284              TRAP #15
000011AA  4E75                     285              RTS
000011AC                           286              ; BRA RETURN
000011AC                           287  *-------------------------------------------------
000011AC= 53 55 42 00              288  SUB_M       DC.B    'SUB',0                 0x9000
000011B0  43F8 11AC                289  SUB_T       LEA SUB_M,A1
000011B4  700E                     290              MOVE.L #14,D0
000011B6  4E4F                     291              TRAP #15
000011B8  4E75                     292              RTS
000011BA                           293              ; BRA RETURN
000011BA                           294  *-------------------------------------------------
000011BA= 44 49 56 53 00           295  DIVS_M      DC.B    'DIVS',0    * Issue     0x81C0
000011C0  43F8 11BA                296  DIVS_T      LEA DIVS_M,A1
000011C4  700E                     297              MOVE.L #14,D0
000011C6  4E4F                     298              TRAP #15
000011C8  4E75                     299              RTS
000011CA                           300              ; BRA RETURN
000011CA                           301  *-------------------------------------------------
000011CA= 4F 52 00                 302  OR_M        DC.B    'OR',0                  0x8000
000011CE  43F8 11CA                303  OR_T        LEA OR_M,A1
000011D2  700E                     304              MOVE.L #14,D0
000011D4  4E4F                     305              TRAP #15
000011D6  4E75                     306              RTS
000011D8                           307              ; BRA RETURN
000011D8                           308  *-------------------------------------------------
000011D8= 42 4C 54 00              309  BLT_M       DC.B    'BLT',0                 0x6D00
000011DC  43F8 11D8                310  BLT_T       LEA BLT_M,A1
000011E0  700E                     311              MOVE.L #14,D0
000011E2  4E4F                     312              TRAP #15
000011E4  4E75                     313              RTS
000011E6                           314              ; BRA RETURN
000011E6                           315  *-------------------------------------------------
000011E6= 42 47 45 00              316  BGE_M       DC.B    'BGE',0                 0x6C00
000011EA  43F8 11E6                317  BGE_T       LEA BGE_M,A1
000011EE  700E                     318              MOVE.L #14,D0
000011F0  4E4F                     319              TRAP #15
000011F2  4E75                     320              RTS
000011F4                           321              ; BRA RETURN
000011F4                           322  *-------------------------------------------------
000011F4= 42 56 43 00              323  BVC_M       DC.B    'BVC',0                 0x6800
000011F8  43F8 11F4                324  BVC_T       LEA BVC_M,A1
000011FC  700E                     325              MOVE.L #14,D0
000011FE  4E4F                     326              TRAP #15
00001200  4E75                     327              RTS
00001202                           328              ; BRA RETURN
00001202                           329  *-------------------------------------------------
00001202= 42 43 53 00              330  BCS_M       DC.B    'BCS',0                 0x6500
00001206  43F8 1202                331  BCS_T       LEA BCS_M,A1
0000120A  700E                     332              MOVE.L #14,D0
0000120C  4E4F                     333              TRAP #15
0000120E  4E75                     334              RTS
00001210                           335              ; BRA RETURN
00001210                           336  *-------------------------------------------------
00001210= 42 52 41 20 00           337  BRA_M       DC.B    'BRA ',0                0x6000
00001216  43F8 1210                338  BRA_T       LEA BRA_M,A1
0000121A  700E                     339              MOVE.L #14,D0
0000121C  4E4F                     340              TRAP #15
0000121E                           341  
0000121E  3410                     342              MOVE.W (A0),D2      * Moving the current 16-bits address into D2
00001220  C47C 00FF                343              AND.W #BITMASK8,D2
00001224                           344  
00001224  E142                     345              ASL.W #8, D2
00001226  E042                     346              ASR.W #8, D2
00001228                           347  
00001228                           348              ; ADD.W A0,D2
00001228                           349  
00001228  6100 FE66                350              BSR DISPLAY_HEX 
0000122C                           351              
0000122C  4E75                     352              RTS
0000122E                           353              ; BRA RETURN
0000122E                           354  *-------------------------------------------------
0000122E= 53 55 42 51 00           355  SUBQ_M      DC.B    'SUBQ',0                0x5100
00001234  43F8 122E                356  SUBQ_T      LEA SUBQ_M,A1
00001238  700E                     357              MOVE.L #14,D0
0000123A  4E4F                     358              TRAP #15
0000123C  4E75                     359              RTS
0000123E                           360              ; BRA RETURN
0000123E                           361  *-------------------------------------------------
0000123E= 4A 53 52 00              362  JSR_M       DC.B    'JSR',0     * Tested    0x4E80
00001242  43F8 123E                363  JSR_T       LEA JSR_M,A1
00001246  700E                     364              MOVE.L #14,D0
00001248  4E4F                     365              TRAP #15
0000124A  4E75                     366              RTS
0000124C                           367              ; BRA RETURN
0000124C                           368  *-------------------------------------------------
0000124C= 52 54 53 00              369  RTS_M       DC.B    'RTS',0     * Tested    0x4E75
00001250  43F8 124C                370  RTS_T       LEA RTS_M,A1
00001254  700E                     371              MOVE.L #14,D0
00001256  4E4F                     372              TRAP #15
00001258  4E75                     373              RTS
0000125A                           374              ; BRA RETURN
0000125A                           375  *-------------------------------------------------
0000125A= 4E 4F 50 00              376  NOP_M       DC.B    'NOP',0     * Tested    0x4E71
0000125E  43F8 125A                377  NOP_T       LEA NOP_M,A1
00001262  700E                     378              MOVE.L #14,D0
00001264  4E4F                     379              TRAP #15
00001266  4E75                     380              RTS
00001268                           381              ; BRA RETURN
00001268                           382  *-------------------------------------------------
00001268= 4D 4F 56 45 4D 00        383  MOVEM_M     DC.B    'MOVEM',0               0x4880
0000126E  43F8 1268                384  MOVEM_T     LEA MOVEM_M,A1
00001272  700E                     385              MOVE.L #14,D0
00001274  4E4F                     386              TRAP #15
00001276  4E75                     387              RTS
00001278                           388              ; BRA RETURN
00001278                           389  *-------------------------------------------------
00001278= 4E 45 47 00              390  NEG_M       DC.B    'NEG',0     * Tested    0x4400
0000127C  43F8 1278                391  NEG_T       LEA NEG_M,A1
00001280  700E                     392              MOVE.L #14,D0
00001282  4E4F                     393              TRAP #15
00001284  4E75                     394              RTS
00001286                           395              ; BRA RETURN
00001286                           396  *-------------------------------------------------
00001286= 4C 45 41 00              397  LEA_M       DC.B    'LEA',0                 0x41C0
0000128A  43F8 1286                398  LEA_T       LEA LEA_M,A1
0000128E  700E                     399              MOVE.L #14,D0
00001290  4E4F                     400              TRAP #15
00001292  4E75                     401              RTS
00001294                           402              ; BRA RETURN
00001294                           403  *-------------------------------------------------
00001294= 4D 4F 56 45 41 2E ...    404  MOAW_M      DC.B    'MOVEA.W',0             0x3040
0000129C  43F8 1294                405  MOAW_T      LEA MOAW_M,A1
000012A0  700E                     406              MOVE.L #14,D0
000012A2  4E4F                     407              TRAP #15
000012A4  4E75                     408              RTS
000012A6                           409              ; BRA RETURN
000012A6                           410  *-------------------------------------------------
000012A6= 4D 4F 56 45 2E 57 00     411  MOW_M       DC.B    'MOVE.W',0              0x3000
000012AE  43F8 12A6                412  MOW_T       LEA MOW_M,A1
000012B2  700E                     413              MOVE.L #14,D0
000012B4  4E4F                     414              TRAP #15
000012B6  4E75                     415              RTS
000012B8                           416              ; BRA RETURN
000012B8                           417  *-------------------------------------------------
000012B8= 4D 4F 56 45 41 2E ...    418  MOAL_M      DC.B    'MOVEA.L',0             0x2040
000012C0  43F8 12B8                419  MOAL_T      LEA MOAL_M,A1
000012C4  700E                     420              MOVE.L #14,D0
000012C6  4E4F                     421              TRAP #15
000012C8  4E75                     422              RTS
000012CA                           423              ; BRA RETURN
000012CA                           424  *-------------------------------------------------
000012CA= 4D 4F 56 45 2E 4C 00     425  MOL_M       DC.B    'MOVE.L',0              0x2000
000012D2  43F8 12CA                426  MOL_T       LEA MOL_M,A1
000012D6  700E                     427              MOVE.L #14,D0
000012D8  4E4F                     428              TRAP #15
000012DA  4E75                     429              RTS
000012DC                           430              ; BRA RETURN
000012DC                           431  *-------------------------------------------------
000012DC= 4D 4F 56 45 2E 42 00     432  MOB_M       DC.B    'MOVE.B',0              0x1000
000012E4  43F8 12DC                433  MOB_T       LEA MOB_M,A1
000012E8  700E                     434              MOVE.L #14,D0
000012EA  4E4F                     435              TRAP #15
000012EC  4E75                     436              RTS
000012EE                           437              ; BRA RETURN
000012EE                           438  *-------------------------------------------------
000012EE= 43 4D 50 49 00           439  CMPI_M      DC.B    'CMPI',0                0x0C00
000012F4  43F8 12EE                440  CMPI_T      LEA CMPI_M,A1
000012F8  700E                     441              MOVE.L #14,D0
000012FA  4E4F                     442              TRAP #15
000012FC  4E75                     443              RTS
000012FE                           444              ; BRA RETURN
000012FE                           445  *-------------------------------------------------
000012FE= 42 43 4C 52 00           446  BCLR_M      DC.B    'BCLR',0                0x01C0
00001304  43F8 12FE                447  BCLR_T      LEA BCLR_M,A1
00001308  700E                     448              MOVE.L #14,D0
0000130A  4E4F                     449              TRAP #15
0000130C  4E75                     450              RTS
0000130E                           451              ; BRA RETURN
0000130E                           452  *-------------------------------------------------
0000130E= 4F 52 49 00              453  ORI_M       DC.B    'ORI',0                 0x0000
00001312  43F8 130E                454  ORI_T       LEA ORI_M,A1
00001316  700E                     455              MOVE.L #14,D0
00001318  4E4F                     456              TRAP #15
0000131A  4E75                     457              RTS
0000131C                           458              ; BRA RETURN
0000131C                           459  
0000131C                           460  *-------------------------------- Data Section ---------------------------------
0000131C                           461  
0000131C= 41 44 44 52 45 53 ...    462  HEADER      DC.B 'ADDRESS   OP-CODE OPERAND          INSTRUCTION', 0 
00001348= 30 78 00                 463  INIT_HEX    DC.B '0x',0
0000134B= 0D 0A 00                 464  NEWLINE     DC.B  CR,LF,0
0000134E= 0A01 0000                465  POSITION    DC.W  $0A01,0
00001352                           466  
00001352                           467  ; Byte_M        DC.B  '.B ',0
00001352                           468  ; Word_M        DC.B  '.W ',0
00001352                           469  ; Long_M        DC.B  '.L ',0
00001352                           470  
00001352                           471  *---------------------------- Task Operation List ------------------------------
00001352                           472  * The values for this constant are set to move in parallel with those of
00001352                           473  * the constant BITMASK via steps at label NEXT_MASK.
00001352                           474  
00001352= 1120 112E 113C 1...      475  TASK_OP     DC.W ROL_T,LSL_T,ASL_T,ROR_T,LSR_T,ASR_T,ANDA_T,ADD_T,MULS_T,CMP_T
00001366= 11B0 11C0 11CE 1...      476              DC.W SUB_T,DIVS_T,OR_T,BLT_T,BGE_T,BVC_T,BCS_T,BRA_T,SUBQ_T,JSR_T
0000137A= 1250 125E 126E 1...      477              DC.W RTS_T,NOP_T,MOVEM_T,NEG_T,LEA_T,MOAW_T,MOW_T,MOAL_T,MOL_T,MOB_T
0000138E= 12F4 1304 1312 0000      478              DC.W CMPI_T,BCLR_T,ORI_T,0
00001396                           479  
00001396                           480  *--------------------------- Bitmask Translation List --------------------------
00001396= E118 E108 E100 E...      481  BITMASK     DC.W $E118,$E108,$E100,$E018,$E008,$E000,$D0C0,$D000,$C1C0,$B000
000013AA= 9000 81C0 8000 6...      482              DC.W $9000,$81C0,$8000,$6D00,$6C00,$6800,$6500,$6000,$5100,$4E80
000013BE= 4E75 4E71 4880 4...      483              DC.W $4E75,$4E71,$4880,$4400,$41C0,$3040,$3000,$2040,$2000,$1000
000013D2= 0C00 01C0 0000 0000      484              DC.W $0C00,$01C0,$0000,0
000013DA                           485  
000013DA                           486  *--------------------------------- Source Code ---------------------------------
000013DA= 4E75 D6C7 4EB8 4...      487  SOURCE_C    DC.W  $4E75,$D6C7,$4EB8,$4487,$D5C2,$4E71,$4EB9,$D280,$4E71,$4E75
000013EE                           488  ;                  RTS   ADDA  JSR   NEG   ADDA  NOP   JSR   ADD   NOP   RTS
000013EE= AAAA EE45 E6AA E...      489              DC.W  $AAAA,$EE45,$E6AA,$E439,$2646,$EF45,$E7AA,$E539,$303C
00001400                           490  ;                  ERROR ASR   LSR   ROR   MOVEA ASL   LSL   ROL   MOVE.W
00001400= E539 6078 EF45 6...      491              DC.W  $E539,$6078,$EF45,$68CD,$BBBB,$E6AA,$EE45,$85C3,$0001,0
00001414                           492  ;                  ROL   BRA   ASL   BVC   ERROR LSR   ASR   DIVS  TEST
00001414                           493  
00001414                           494  ; SOURCE_C  DC.W    $1401,$1401,$60FC,$1401,0
00001414                           495  
00001414                           496  
00001414                           497      END     START               * last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD_M               1180
ADD_T               1184
ANDA_M              1170
ANDA_T              1176
ASL_M               1138
ASL_T               113C
ASR_M               1162
ASR_T               1166
BCLR_M              12FE
BCLR_T              1304
BCS_M               1202
BCS_T               1206
BGE_M               11E6
BGE_T               11EA
BITMASK             1396
BITMASK3            7
BITMASK4            F
BITMASK8            FF
BLT_M               11D8
BLT_T               11DC
BRA_M               1210
BRA_T               1216
BVC_M               11F4
BVC_T               11F8
CMPI_M              12EE
CMPI_T              12F4
CMP_M               119E
CMP_T               11A2
CR                  D
DISPLAY_HEX         1090
DISPLAY_INT         107A
DIVS_M              11BA
DIVS_T              11C0
EXIT                2700
HEADER              131C
HEX_BITMASK         10DC
HEX_VALUE           10FC
INIT_HEX            1348
INIT_OP             1022
JSR_M               123E
JSR_T               1242
LEA_M               1286
LEA_T               128A
LF                  A
LOOP_HEX            10B6
LOOP_OP             1034
LSL_M               112A
LSL_T               112E
LSR_M               1154
LSR_T               1158
MOAL_M              12B8
MOAL_T              12C0
MOAW_M              1294
MOAW_T              129C
MOB_M               12DC
MOB_T               12E4
MOL_M               12CA
MOL_T               12D2
MOVEM_M             1268
MOVEM_T             126E
MOW_M               12A6
MOW_T               12AE
MULS_M              118E
MULS_T              1194
NEG_M               1278
NEG_T               127C
NEWLINE             134B
NEXT_HEX            10D6
NEXT_MASK           1064
NOP_M               125A
NOP_T               125E
ORI_M               130E
ORI_T               1312
OR_M                11CA
OR_T                11CE
POSITION            134E
RETURN              104E
ROL_M               111C
ROL_T               1120
ROR_M               1146
ROR_T               114A
RTS_M               124C
RTS_T               1250
SHIFT               106C
SOURCE_C            13DA
START               1000
SUBQ_M              122E
SUBQ_T              1234
SUB_M               11AC
SUB_T               11B0
TASK_OP             1352
WORD                2
