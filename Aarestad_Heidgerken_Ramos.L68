00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 11/29/2014 2:25:39 AM

00000000                             1  *-------------------------------------------------------------------------------
00000000                             2  * Title      : Dissassembler
00000000                             3  * Written by : Ryan Aarestad, David Heidgerken, Matthew Ramos
00000000                             4  * Date       : Thursday November 6, 2014
00000000                             5  * Description: Assembly language program that can read a string of binary and
00000000                             6  *              decode it into Assembly language instructions.  
00000000                             7  *-------------------------------------------------------------------------------
00000000                             8  
00000000                             9              OPT   CRE
00000000                            10  
00000000  =0000000D                 11  CR          EQU   $000D
00000000  =0000000A                 12  LF          EQU   $000A
00000000  =00001000                 13  START       EQU   $1000         * Program starting address
00000000  =00002700                 14  EXIT        EQU   $2700         * Simulator stoping code
00000000  =00000002                 15  WORD        EQU   $0002         * Advance address by a word
00000000                            16  
00000000  =000000FF                 17  BITMASK8    EQU   $00FF
00000000  =0000000F                 18  BITMASK4    EQU   $0F
00000000  =00000007                 19  BITMASK3    EQU   $07
00000000                            20  
00000000                            21  *----------------------- Address Register / Data Register ----------------------
00000000                            22  * A0: Designated for Source Code
00000000                            23  * A1: Designated for Displaying string to the output
00000000                            24  * A2: Designated for OP Bitmask list / Hexadecimal Bitmask list
00000000                            25  * A3: Designated for Task Operation list / Hexadecimal value list
00000000                            26  * A4: 
00000000                            27  * A5: 
00000000                            28  * A6: 
00000000                            29  
00000000                            30  
00000000                            31  * D0: Designated for task code values while using TRAP #15
00000000                            32  * D1: Main 16-bits copy of the instructions (PRINTING PURPOSES) / Task 11
00000000                            33  * D2: Hexadecimal Temp convert
00000000                            34  * D3: Temporary 16-bits for bitmask comparison
00000000                            35  * D4: 
00000000                            36  * D5: 
00000000                            37  * D6: 
00000000                            38  * D7: 
00000000                            39  
00000000                            40  *------------------- Main Program / Initial Starting Point ---------------------
00000000                            41  
00001000                            42              ORG    START        * Program begins here
00001000                            43  
00001000  43F9 0000128E             44              LEA HEADER,A1       * Load Dissassembler header message into A1 
00001006  103C 000D                 45              MOVE.B #13,D0       * Move task 13 into Data Register 0
0000100A  4E4F                      46              TRAP #15            * Display the string at (A1) with CR, LF.
0000100C                            47  
0000100C  41F9 00001344             48              LEA SOURCE_C,A0     * Load the source code into address register 0
00001012                            49  
00001012  6100 000E                 50              BSR INIT_OP         * Hunts down each Operation code like a mad man
00001016                            51  
00001016  33FC 0A01 000012B8        52              MOVE.W #$0A01,POSITION      *** TEST - RESET POSITION ***
0000101E  4E72 2700                 53              STOP #EXIT          * Halt Simulator
00001022                            54  
00001022                            55  
00001022                            56  ********************* OP-CODE Looping Algorithm Subroutine *********************
00001022                            57  
00001022                            58  INIT_OP     * Resets the list of bitmasks & english to the begining
00001022                            59  
00001022  45F9 00001300             60              LEA BITMASK,A2      * Load the bitmask list into address register 2
00001028  47F9 000012BC             61              LEA TASK_OP,A3      * Load the OP task list into address register 3
0000102E                            62  
0000102E  2208                      63              MOVE.L A0,D1        * Moving the current 16-bits address into data register 1
00001030  103C 0003                 64              MOVE.B #3,D0        * Moving task 3 into Data Register 0 
00001034  4E4F                      65              TRAP #15            * Display signed number in D1.L in decimal in smallest field. 
00001036                            66  
00001036  3610                      67  LOOP_OP     MOVE.W (A0),D3      * Move the current 16-bits into data register 3
00001038                            68  
00001038  C652                      69              AND.W (A2),D3       * AND the current bitmask with temp instruction
0000103A                            70  
0000103A  B652                      71              CMP.W (A2),D3       * Compares the current bitmask in (A2) with D3
0000103C  6600 0020                 72              BNE NEXT_MASK       * No Match found branch to the NEXT_MASK
00001040                            73              
00001040  103C 000B                 74              MOVE.B #11,D0       * Moving task 11 into Data Register 0
00001044  3239 000012B8             75              MOVE.W POSITION,D1  * Sets up the desired position
0000104A  4E4F                      76              TRAP #15            * Position the cursor at [0Axx] x - any number
0000104C                            77  
0000104C  3653                      78              MOVEA.W (A3),A3     * Moves the task address into the same (An)
0000104E  4E93                      79              JSR (A3)            * Jumps to the current task subroutine from A3
00001050                            80  
00001050  700E                      81              MOVE.L #14,D0       * Moving task 14 into Data Register 0
00001052  4E4F                      82              TRAP #15            * Display the string at (A1) without CR, LF
00001054                            83  
00001054  3410                      84              MOVE.W (A0),D2      * Reloads the orignal 16-bits as a temp again
00001056  6100 001C                 85              BSR DISPLAY_HEX     * Display the current 16-bits in Hexadecimal
0000105A                            86  
0000105A  6000 000A                 87              BRA SHIFT           * Shifts to the next 16-bits of the source code
0000105E                            88  
0000105E                            89  *---------------------- Advancing Bitmask & OP Task list -----------------------
0000105E                            90  
0000105E  544A                      91  NEXT_MASK   ADDA.W #WORD,A2     * Shifts to the next bitmask
00001060  544B                      92              ADDA.W #WORD,A3     * Shifts to the next OP Name
00001062                            93  
00001062  4A53                      94              TST.W (A3)          * Did I reach the end of the English list?
00001064  66D0                      95              BNE LOOP_OP         * Go back to LOOP_OP and test the new bitmask
00001066                            96  
00001066  5448                      97  SHIFT       ADDA.W #WORD,A0     * Shifts to the next set of 16-bits instruction
00001068                            98  
00001068  5279 000012B8             99              ADDQ.W #1,POSITION  *** VERY IMPORTANT: Shifts the position by 1 ***
0000106E                           100  
0000106E  4A50                     101              TST.W (A0)          * Checks to see if you reached the end of the instructions
00001070  66B0                     102              BNE INIT_OP         * (!=) Resets the bitmask & OP task lists
00001072  4E75                     103              RTS                 * Returns from subroutine
00001074                           104  
00001074                           105  
00001074                           106  ************************ Display Hexadecimal Subroutine ************************
00001074                           107  * Displays an output of a single 16-bit instruction as a hexadecimal value
00001074                           108  * Take that prof. Nash (mostly Kim), I didn't want to use task #15 anyway
00001074                           109  
00001074                           110  *** IMPORTANT *** Load the value that you wish to display in hexadecimal in D2
00001074                           111  
00001074  103C 000B                112  DISPLAY_HEX MOVE.B #11,D0       * Moving task 11 into Data Register 0
00001078  0641 2200                113              ADDI #$2200,D1
0000107C  4E4F                     114              TRAP #15            * Position the cursor at [2Cxx] x - any number
0000107E                           115  
0000107E  43F9 000012B2            116              LEA INIT_HEX,A1
00001084  103C 000E                117              MOVE.B #14,D0
00001088  4E4F                     118              TRAP #15
0000108A                           119  
0000108A  45F9 000010E2            120  RESET_HEX   LEA HEX_BITMASK,A2
00001090  47F9 00001102            121              LEA HEX_VALUE,A3
00001096                           122  
00001096  E95A                     123              ROL #4,D2           * Shifts to read the next hexadecimal digit
00001098  6100 0022                124              BSR LOOP_HEX        * Branch towards the loop of hex thingy
0000109C                           125  
0000109C  E95A                     126              ROL #4,D2           * I HATE THIS, SO MUCH REPEATING CODE
0000109E  6100 001C                127              BSR LOOP_HEX        * I TRIED EVERYTHING WITHOUT USING ANOTHER
000010A2  E95A                     128              ROL #4,D2           * DATA REGISTER. THAT IS SUCH A WASTE... GOSH
000010A4  6100 0016                129              BSR LOOP_HEX        * SO I'M GOING TO LEAVE THIS HERE, BECUASE I 
000010A8  E95A                     130              ROL #4,D2           * REALLY DON"T CARE. TOO MUCH TIME WAS WASTED
000010AA  6100 0010                131              BSR LOOP_HEX        * ANNND YES!! NO MORE BAD CODE (IT WORKS DEAL)
000010AE                           132              
000010AE  43F9 000012B5            133              LEA NEWLINE,A1      * Creates a newline for the next instruction. Loading NEWLINE into (A1)
000010B4  103C 000E                134              MOVE.B #14,D0       * Moving task 14 into Data Register 0
000010B8  4E4F                     135              TRAP #15            * Display the NULL terminated string at (A1) without CR, LF
000010BA  4E75                     136              RTS                 * Returns from subroutine
000010BC                           137  
000010BC  3602                     138  LOOP_HEX    MOVE.W D2,D3        * Move the current 16-bits into data register 3
000010BE  C652                     139              AND.W (A2),D3       * AND the current bitmask with temp instruction
000010C0  B652                     140              CMP.W (A2),D3       * Compares the current bitmask in (A2) with D3
000010C2  6600 0018                141              BNE NEXT_HEX
000010C6                           142  
000010C6  43D3                     143              LEA (A3),A1
000010C8  103C 000E                144              MOVE.B #14,D0
000010CC  4E4F                     145              TRAP #15
000010CE                           146              
000010CE  45F9 000010E2            147              LEA HEX_BITMASK,A2
000010D4  47F9 00001102            148              LEA HEX_VALUE,A3
000010DA  4E75                     149              RTS                 * Returns from subroutine
000010DC                           150  
000010DC  544A                     151  NEXT_HEX    ADDA.W #WORD,A2     * Shifts to the next binary
000010DE  544B                     152              ADDA.W #WORD,A3     * Shifts to the next hexadecimal char
000010E0  60DA                     153              BRA LOOP_HEX        * Go back to LOOP and test the new bitmask
000010E2                           154  
000010E2= 000F 000E 000D 0...      155  HEX_BITMASK DC.W $F,$E,$D,$C,$B,$A,$9,$8,$7,$6,$5,$4,$3,$2,$1,$0
00001102= 4600 4500 4400 4...      156  HEX_VALUE   DC.W 'F','E','D','C','B','A','9','8','7','6','5','4','3','2','1','0'
00001122                           157  
00001122                           158  
00001122                           159  ************************* Effective Address Algorithm **************************
00001122                           160  *-------------------------------------------------------------------------------
00001122                           161  * SubRoutine for handling One Operand Effective addressing.
00001122                           162  * Written by: David Heidgerken
00001122                           163  * Description.  16 bit Instruction will be passed to subroutine via D7
00001122                           164  * and will parse it to find which address mode and location is being used.
00001122                           165  *D6 used for Register value, D5 is EA Mode
00001122                           166  *-----------------------------------------------------------------------------
00001122                           167  ; OneOpEA       MOVE.B  #BITMASK3, D6   ;move primative 3 bit mask into D3 
00001122                           168  ;           MOVE.B  #BITMASK3, D5   ;move primative 3 bitmask into D4
00001122                           169  ;           LSL.W   3,D5            ;shift mask left 3 times
00001122                           170              
00001122                           171  ;           AND.W   D7,D6           ;and D7 and D3 store in D3 Register
00001122                           172  ;           AND.W   D7,D5           ;and D7 and D4 store in D4 Mode
00001122                           173              
00001122                           174              ; BSR                       ;return to calling instruction
00001122                           175              
00001122                           176  
00001122                           177  *-------------------------------------------------------------------------------
00001122                           178  * SubRoutine for handling One Operand Displacement.
00001122                           179  * Written by: David Heidgerken
00001122                           180  * Description.  16 bit Instruction will be passed to subroutine via D7
00001122                           181  * and will parse the instruciton to determine the offset being usedstored in D3
00001122                           182  *-------------------------------------------------------------------------------
00001122                           183  ; OneOpDis  MOVE.B  #BITMASK8, D6   ;move 8bitmask into D6
00001122                           184  ;           AND.L   D7,D6           ;and D7 with D6(Offset)
00001122                           185              
00001122                           186  
00001122                           187  *-------------------------------------------------------------------------------
00001122                           188  * SubRoutine for handling One Operand Effective addressing.
00001122                           189  * Written by: David Heidgerken
00001122                           190  * Description.  16 bit Instruction will be passed to subroutine via D7
00001122                           191  * and will parse the last 12 bits to determine the addressing mode and 
00001122                           192  * locations of the data.
00001122                           193  *-------------------------------------------------------------------------------
00001122                           194  ; TwoOp     MOVE.B  #BITMASK3, D6   ;move primative 3 bit mask into D6
00001122                           195  ;           MOVE.B  #BITMASK3, D5   ;move primative 3 bitmask into D5
00001122                           196  ;           MOVE.B  #BITMASK3, D4   ;move primative 3 bit mask into D4
00001122                           197  ;           MOVE.B  #BITMASK3, D3   ;move primative 3 bit mask into D3
00001122                           198              
00001122                           199  ;           LSL.W   3,D5            ;shift mask left 3 times
00001122                           200  ;           LSL.W   6,D4            ;shift mask left 3 times
00001122                           201  ;           LSL.W   6,D3            ;shift mask left 3 times
00001122                           202  ;           LSL.W   6,D3            ;shift mask left 3 times
00001122                           203              
00001122                           204  ;           AND.L   D7,D6           ;and D7 with D6 DestRegister
00001122                           205  ;           AND.L   D7,D6           ;and D7 with D5 DestMode
00001122                           206  ;           AND.L   D7,D6           ;and D7 with D4 SrcMode
00001122                           207  ;           AND.L   D7,D6           ;and D7 with D3 SrcRegister
00001122                           208              
00001122                           209              ; BSR
00001122                           210  
00001122                           211  
00001122                           212  
00001122                           213  
00001122                           214  ******************** OP-CODE: Individual Task Subroutine Set *******************
00001122                           215  
00001122                           216  *-------------------------------------------------
00001122= 52 4F 4C 00              217  ROL_M       DC.B    'ROL',0     * Tested    0xE118
00001126  43F8 1122                218  ROL_T       LEA ROL_M,A1
0000112A  4E75                     219              RTS
0000112C                           220  *-------------------------------------------------
0000112C= 4C 53 4C 00              221  LSL_M       DC.B    'LSL',0     * Tested    0xE108
00001130  43F8 112C                222  LSL_T       LEA LSL_M,A1
00001134  4E75                     223              RTS
00001136                           224  *-------------------------------------------------
00001136= 41 53 4C 00              225  ASL_M       DC.B    'ASL',0     * Tested    0xE100
0000113A  43F8 1136                226  ASL_T       LEA ASL_M,A1
0000113E  4E75                     227              RTS
00001140                           228  *-------------------------------------------------
00001140= 52 4F 52 00              229  ROR_M       DC.B    'ROR',0     * Tested    0xE018
00001144  43F8 1140                230  ROR_T       LEA ROR_M,A1
00001148  4E75                     231              RTS
0000114A                           232  *-------------------------------------------------
0000114A= 4C 53 52 00              233  LSR_M       DC.B    'LSR',0     * Tested    0xE008
0000114E  43F8 114A                234  LSR_T       LEA LSR_M,A1
00001152  4E75                     235              RTS
00001154                           236  *-------------------------------------------------
00001154= 41 53 52 00              237  ASR_M       DC.B    'ASR',0     * Tested    0xE000
00001158  43F8 1154                238  ASR_T       LEA ASR_M,A1
0000115C  4E75                     239              RTS
0000115E                           240  *-------------------------------------------------
0000115E= 41 44 44 41 00           241  ANDA_M      DC.B    'ADDA',0    * Tested    0xD0C0
00001164  43F8 115E                242  ANDA_T      LEA ANDA_M,A1
00001168  4E75                     243              RTS
0000116A                           244  *-------------------------------------------------
0000116A= 41 44 44 00              245  ADD_M       DC.B    'ADD',0     * Tested    0xD000
0000116E  43F8 116A                246  ADD_T       LEA ADD_M,A1
00001172  4E75                     247              RTS
00001174                           248  *-------------------------------------------------
00001174= 4D 55 4C 53 00           249  MULS_M      DC.B    'MULS',0    * Issue     0xC1C0      Not sure if corrent bitmask
0000117A  43F8 1174                250  MULS_T      LEA MULS_M,A1
0000117E  4E75                     251              RTS
00001180                           252  *-------------------------------------------------
00001180= 43 4D 50 00              253  CMP_M       DC.B    'CMP',0                 0xB000
00001184  43F8 1180                254  CMP_T       LEA CMP_M,A1
00001188  4E75                     255              RTS
0000118A                           256  *-------------------------------------------------
0000118A= 53 55 42 00              257  SUB_M       DC.B    'SUB',0                 0x9000
0000118E  43F8 118A                258  SUB_T       LEA SUB_M,A1
00001192  4E75                     259              RTS
00001194                           260  *-------------------------------------------------
00001194= 44 49 56 53 00           261  DIVS_M      DC.B    'DIVS',0    * Issue     0x81C0      Not sure if corrent bitmask
0000119A  43F8 1194                262  DIVS_T      LEA DIVS_M,A1
0000119E  4E75                     263              RTS
000011A0                           264  *-------------------------------------------------
000011A0= 4F 52 00                 265  OR_M        DC.B    'OR',0                  0x8000
000011A4  43F8 11A0                266  OR_T        LEA OR_M,A1
000011A8  4E75                     267              RTS
000011AA                           268  *-------------------------------------------------
000011AA= 42 4C 54 00              269  BLT_M       DC.B    'BLT',0                 0x6D00      May need to make branching
000011AE  43F8 11AA                270  BLT_T       LEA BLT_M,A1
000011B2  4E75                     271              RTS
000011B4                           272  *-------------------------------------------------
000011B4= 42 47 45 00              273  BGE_M       DC.B    'BGE',0                 0x6C00      its own subroutine loop
000011B8  43F8 11B4                274  BGE_T       LEA BGE_M,A1
000011BC  4E75                     275              RTS
000011BE                           276  *-------------------------------------------------
000011BE= 42 56 43 00              277  BVC_M       DC.B    'BVC',0                 0x6800
000011C2  43F8 11BE                278  BVC_T       LEA BVC_M,A1
000011C6  4E75                     279              RTS
000011C8                           280  *-------------------------------------------------
000011C8= 42 43 53 00              281  BCS_M       DC.B    'BCS',0                 0x6500
000011CC  43F8 11C8                282  BCS_T       LEA BCS_M,A1
000011D0  4E75                     283              RTS
000011D2                           284  *-------------------------------------------------
000011D2= 42 52 41 00              285  BRA_M       DC.B    'BRA',0                 0x6000
000011D6  43F8 11D2                286  BRA_T       LEA BRA_M,A1
000011DA  4E75                     287              RTS
000011DC                           288  *-------------------------------------------------
000011DC= 53 55 42 51 00           289  SUBQ_M      DC.B    'SUBQ',0                0x5100
000011E2  43F8 11DC                290  SUBQ_T      LEA SUBQ_M,A1
000011E6  4E75                     291              RTS
000011E8                           292  *-------------------------------------------------
000011E8= 4A 53 52 00              293  JSR_M       DC.B    'JSR',0     * Tested    0x4E80
000011EC  43F8 11E8                294  JSR_T       LEA JSR_M,A1
000011F0  4E75                     295              RTS
000011F2                           296  *-------------------------------------------------
000011F2= 52 54 53 00              297  RTS_M       DC.B    'RTS',0     * Tested    0x4E75
000011F6  43F8 11F2                298  RTS_T       LEA RTS_M,A1
000011FA  4E75                     299              RTS
000011FC                           300  *-------------------------------------------------
000011FC= 4E 4F 50 00              301  NOP_M       DC.B    'NOP',0     * Tested    0x4E71
00001200  43F8 11FC                302  NOP_T       LEA NOP_M,A1
00001204  4E75                     303              RTS
00001206                           304  *-------------------------------------------------
00001206= 4D 4F 56 45 4D 00        305  MOVEM_M     DC.B    'MOVEM',0               0x4880
0000120C  43F8 1206                306  MOVEM_T     LEA MOVEM_M,A1
00001210  4E75                     307              RTS
00001212                           308  *-------------------------------------------------
00001212= 4E 45 47 00              309  NEG_M       DC.B    'NEG',0     * Tested    0x4400
00001216  43F8 1212                310  NEG_T       LEA NEG_M,A1
0000121A  4E75                     311              RTS
0000121C                           312  *-------------------------------------------------
0000121C= 4C 45 41 00              313  LEA_M       DC.B    'LEA',0                 0x41C0
00001220  43F8 121C                314  LEA_T       LEA LEA_M,A1
00001224  4E75                     315              RTS
00001226                           316  *-------------------------------------------------
00001226= 4D 4F 56 45 41 2E ...    317  MOAW_M      DC.B    'MOVEA.W',0             0x3040
0000122E  43F8 1226                318  MOAW_T      LEA MOAW_M,A1
00001232  4E75                     319              RTS
00001234                           320  *-------------------------------------------------
00001234= 4D 4F 56 45 2E 57 00     321  MOW_M       DC.B    'MOVE.W',0              0x3000
0000123C  43F8 1234                322  MOW_T       LEA MOW_M,A1
00001240  4E75                     323              RTS
00001242                           324  *-------------------------------------------------
00001242= 4D 4F 56 45 41 2E ...    325  MOAL_M      DC.B    'MOVEA.L',0             0x2040
0000124A  43F8 1242                326  MOAL_T      LEA MOAL_M,A1
0000124E  4E75                     327              RTS
00001250                           328  *-------------------------------------------------
00001250= 4D 4F 56 45 2E 4C 00     329  MOL_M       DC.B    'MOVE.L',0              0x2000
00001258  43F8 1250                330  MOL_T       LEA MOL_M,A1
0000125C  4E75                     331              RTS
0000125E                           332  *-------------------------------------------------
0000125E= 4D 4F 56 45 2E 42 00     333  MOB_M       DC.B    'MOVE.B',0              0x1000
00001266  43F8 125E                334  MOB_T       LEA MOB_M,A1
0000126A  4E75                     335              RTS
0000126C                           336  *-------------------------------------------------
0000126C= 43 4D 50 49 00           337  CMPI_M      DC.B    'CMPI',0                0x0C00
00001272  43F8 126C                338  CMPI_T      LEA CMPI_M,A1
00001276  4E75                     339              RTS
00001278                           340  *-------------------------------------------------
00001278= 42 43 4C 52 00           341  BCLR_M      DC.B    'BCLR',0                0x01C0
0000127E  43F8 1278                342  BCLR_T      LEA BCLR_M,A1
00001282  4E75                     343              RTS
00001284                           344  *-------------------------------------------------
00001284= 4F 52 49 00              345  ORI_M       DC.B    'ORI',0                 0x0000
00001288  43F8 1284                346  ORI_T       LEA ORI_M,A1
0000128C  4E75                     347              RTS
0000128E                           348  
0000128E                           349  *-------------------------------- Data Section ---------------------------------
0000128E                           350  
0000128E= 41 44 44 52 45 53 ...    351  HEADER      DC.B 'ADDRESS   OP-CODE                   INSTRUCTION', 0 
000012B2= 30 78 00                 352  INIT_HEX    DC.B '0x',0
000012B5= 0D 0A 00                 353  NEWLINE     DC.B  CR,LF,0
000012B8= 0A01 0000                354  POSITION    DC.W  $0A01,0
000012BC                           355  
000012BC                           356  ; Byte_M        DC.B  '.B ',0
000012BC                           357  ; Word_M        DC.B  '.W ',0
000012BC                           358  ; Long_M        DC.B  '.L ',0
000012BC                           359  
000012BC                           360  *---------------------------- Task Operation List ------------------------------
000012BC                           361  * The values for this constant are set to move in parallel with those of
000012BC                           362  * the constant BITMASK via steps at label NEXT_MASK.
000012BC                           363  
000012BC= 1126 1130 113A 1...      364  TASK_OP     DC.W ROL_T,LSL_T,ASL_T,ROR_T,LSR_T,ASR_T,ANDA_T,ADD_T,MULS_T,CMP_T
000012D0= 118E 119A 11A4 1...      365              DC.W SUB_T,DIVS_T,OR_T,BLT_T,BGE_T,BVC_T,BCS_T,BRA_T,SUBQ_T,JSR_T
000012E4= 11F6 1200 120C 1...      366              DC.W RTS_T,NOP_T,MOVEM_T,NEG_T,LEA_T,MOAW_T,MOW_T,MOAL_T,MOL_T,MOB_T
000012F8= 1272 127E 1288 0000      367              DC.W CMPI_T,BCLR_T,ORI_T,0
00001300                           368  
00001300                           369  *--------------------------- Bitmask Translation List --------------------------
00001300= E118 E108 E100 E...      370  BITMASK     DC.W $E118,$E108,$E100,$E018,$E008,$E000,$D0C0,$D000,$C1C0,$B000
00001314= 9000 81C0 8000 6...      371              DC.W $9000,$81C0,$8000,$6D00,$6C00,$6800,$6500,$6000,$5100,$4E80
00001328= 4E75 4E71 4880 4...      372              DC.W $4E75,$4E71,$4880,$4400,$41C0,$3040,$3000,$2040,$2000,$1000
0000133C= 0C00 01C0 0000 0000      373              DC.W $0C00,$01C0,$0000,0
00001344                           374  
00001344                           375  *--------------------------------- Source Code ---------------------------------
00001344= 4E75 D6C7 4EB8 4...      376  SOURCE_C    DC.W  $4E75,$D6C7,$4EB8,$4487,$D5C2,$4E71,$4EB9,$D280,$4E71,$4E75
00001358                           377  ;                  RTS   ADDA  JSR   NEG   ADDA  NOP   JSR   ADD   NOP   RTS
00001358= AAAA EE45 E6AA E...      378              DC.W  $AAAA,$EE45,$E6AA,$E439,$2646,$EF45,$E7AA,$E539,$303C
0000136A                           379  ;                  ERROR ASR   LSR   ROR   MOVEA ASL   LSL   ROL   MOVE.W
0000136A= E539 60AB EF45 6...      380              DC.W  $E539,$60AB,$EF45,$68CD,$BBBB,$E6AA,$EE45,$85C3,$0001,0
0000137E                           381  ;                  ROL   BRA   ASL   BVC   ERROR LSR   ASR   DIVS  TEST
0000137E                           382  
0000137E                           383      END     START               * last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD_M               116A
ADD_T               116E
ANDA_M              115E
ANDA_T              1164
ASL_M               1136
ASL_T               113A
ASR_M               1154
ASR_T               1158
BCLR_M              1278
BCLR_T              127E
BCS_M               11C8
BCS_T               11CC
BGE_M               11B4
BGE_T               11B8
BITMASK             1300
BITMASK3            7
BITMASK4            F
BITMASK8            FF
BLT_M               11AA
BLT_T               11AE
BRA_M               11D2
BRA_T               11D6
BVC_M               11BE
BVC_T               11C2
CMPI_M              126C
CMPI_T              1272
CMP_M               1180
CMP_T               1184
CR                  D
DISPLAY_HEX         1074
DIVS_M              1194
DIVS_T              119A
EXIT                2700
HEADER              128E
HEX_BITMASK         10E2
HEX_VALUE           1102
INIT_HEX            12B2
INIT_OP             1022
JSR_M               11E8
JSR_T               11EC
LEA_M               121C
LEA_T               1220
LF                  A
LOOP_HEX            10BC
LOOP_OP             1036
LSL_M               112C
LSL_T               1130
LSR_M               114A
LSR_T               114E
MOAL_M              1242
MOAL_T              124A
MOAW_M              1226
MOAW_T              122E
MOB_M               125E
MOB_T               1266
MOL_M               1250
MOL_T               1258
MOVEM_M             1206
MOVEM_T             120C
MOW_M               1234
MOW_T               123C
MULS_M              1174
MULS_T              117A
NEG_M               1212
NEG_T               1216
NEWLINE             12B5
NEXT_HEX            10DC
NEXT_MASK           105E
NOP_M               11FC
NOP_T               1200
ORI_M               1284
ORI_T               1288
OR_M                11A0
OR_T                11A4
POSITION            12B8
RESET_HEX           108A
ROL_M               1122
ROL_T               1126
ROR_M               1140
ROR_T               1144
RTS_M               11F2
RTS_T               11F6
SHIFT               1066
SOURCE_C            1344
START               1000
SUBQ_M              11DC
SUBQ_T              11E2
SUB_M               118A
SUB_T               118E
TASK_OP             12BC
WORD                2
